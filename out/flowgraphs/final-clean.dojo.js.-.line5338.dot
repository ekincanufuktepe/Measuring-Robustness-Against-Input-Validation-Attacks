digraph {
rankdir="TD"
BB_entry272[shape=none,label=""];
BB_entry272 -> BB4359 [tailport=s, headport=n, headlabel="    4359"]
BB4359 [shape=record label="{12962: constant[undefined,v1]|12963: vardecl['ap']|12964: vardecl['aps']|12965: vardecl['apc']|12966: vardecl['forEach']|12967: vardecl['tnl']|12968: vardecl['loopBody']|12969: vardecl['adaptAsForEach']|12970: vardecl['adaptAsMap']|12971: vardecl['adaptAsFilter']|12972: vardecl['adaptWithCondition']|12973: vardecl['NodeList']|12974: vardecl['nl']|12975: vardecl['nlp']|12976: function-decl[function queryForEngine ( engine NodeList ),-]|12977: vardecl['query']}" ] 
BB4359 -> BB4360 [tailport=s, headport=n, headlabel="      4360"]
BB4360 [shape=record label="{12978: read-variable['has',v3,-]|12979: read-property[v3,'add',-]|12980: \<variable-non-null-undef\>['has']|12981: constant[\"array-extensible\",v4]|12982: function-expr[function ( ),v5]}" ] 
BB4360 -> BB4361 [tailport=s, headport=n, headlabel="      4361"]
BB4360 -> BB4384 [tailport=s, headport=n, color=gray, headlabel="      4384"]
BB4361 [shape=record label="{12983: call-has.add [v3,'add',v4,v5,-]*}" ] 
BB4361 -> BB4362 [tailport=s, headport=n, headlabel="      4362"]
BB4361 -> BB4384 [tailport=s, headport=n, color=gray]
BB4362 [shape=record label="{12984: read-variable['Array',v7,-]|12985: read-property[v7,'prototype',v6]|12986: \<variable-non-null-undef\>['Array']|12987: write-variable[v6,'ap']*|12988: read-variable['ap',v9,-]|12989: read-property[v9,'slice',v8]|12990: \<variable-non-null-undef\>['ap']|12991: write-variable[v8,'aps']*|12992: read-variable['ap',v11,-]|12993: read-property[v11,'concat',v10]|12994: \<variable-non-null-undef\>['ap']|12995: write-variable[v10,'apc']*|12996: read-variable['array',v13,-]|12997: read-property[v13,'forEach',v12]|12998: \<variable-non-null-undef\>['array']|12999: write-variable[v12,'forEach']*|13000: function-expr[function ( a parent NodeListCtor ),v14]|13001: write-variable[v14,'tnl']*|13002: function-expr[function ( f a o ),v15]|13003: write-variable[v15,'loopBody']*|13004: function-expr[function ( f o ),v16]|13005: write-variable[v16,'adaptAsForEach']*|13006: function-expr[function ( f o ),v17]|13007: write-variable[v17,'adaptAsMap']*|13008: function-expr[function ( f o ),v18]|13009: write-variable[v18,'adaptAsFilter']*|13010: function-expr[function ( f g o ),v19]|13011: write-variable[v19,'adaptWithCondition']*|13012: function-expr[function ( array ),v20]|13013: write-variable[v20,'NodeList']*|13014: read-variable['NodeList',v21,-]|13015: write-variable[v21,'nl']*|13016: read-variable['nl',v23,-]|13017: read-variable['has',v26,v25]|13018: constant[\"array-extensible\",v27]}" ] 
BB4362 -> BB4363 [tailport=s, headport=n, headlabel="      4363"]
BB4362 -> BB4384 [tailport=s, headport=n, color=gray]
BB4363 [shape=record label="{13019: call-has [v25,v26,v27,v24]}" ] 
BB4363 -> BB4364 [tailport=s, headport=n, headlabel="      4364"]
BB4363 -> BB4384 [tailport=s, headport=n, color=gray]
BB4364 [shape=record label="{13020: if[v24](true-block:4365,false-block:4366)}" ] 
BB4364 -> BB4365 [tailport=s, headport=n, headlabel="      4365"]
BB4364 -> BB4366 [tailport=s, headport=n, headlabel="      4366"]
BB4365 [shape=record label="{13021: read-variable['Array',v28,-]}" ] 
BB4365 -> BB4367 [tailport=s, headport=n, headlabel="      4367"]
BB4365 -> BB4384 [tailport=s, headport=n, color=gray]
BB4366 [shape=record label="{13022: new[v22]}" ] 
BB4366 -> BB4368 [tailport=s, headport=n, headlabel="      4368"]
BB4367 [shape=record label="{13023: construct [-,v28,v22]}" ] 
BB4367 -> BB4368 [tailport=s, headport=n]
BB4367 -> BB4384 [tailport=s, headport=n, color=gray]
BB4368 [shape=record label="{13024: write-property[v23,'prototype',v22]|13025: \<variable-non-null-undef\>['nl']|13026: write-variable[v22,'nlp']*|13027: read-variable['nl',v29,-]|13028: read-variable['nlp',v30,-]|13029: read-variable['tnl',v28,-]|13030: write-property[v30,'_wrap',v28]|13031: \<variable-non-null-undef\>['nlp']|13032: write-property[v29,'_wrap',v28]|13033: \<variable-non-null-undef\>['nl']*|13034: read-variable['nl',v32,-]|13035: read-variable['adaptAsMap',v31,-]|13036: write-property[v32,'_adaptAsMap',v31]|13037: \<variable-non-null-undef\>['nl']*|13038: read-variable['nl',v34,-]|13039: read-variable['adaptAsForEach',v33,-]|13040: write-property[v34,'_adaptAsForEach',v33]|13041: \<variable-non-null-undef\>['nl']*|13042: read-variable['nl',v36,-]|13043: read-variable['adaptAsFilter',v35,-]|13044: write-property[v36,'_adaptAsFilter',v35]|13045: \<variable-non-null-undef\>['nl']*|13046: read-variable['nl',v38,-]|13047: read-variable['adaptWithCondition',v37,-]|13048: write-property[v38,'_adaptWithCondition',v37]|13049: \<variable-non-null-undef\>['nl']*|13050: read-variable['forEach',v40,v39]|13051: read-variable['Array',v42,-]|13052: constant[\"slice\",v43]|13053: constant[\"splice\",v44]}" ] 
BB4368 -> BB4369 [tailport=s, headport=n, headlabel="      4369"]
BB4368 -> BB4384 [tailport=s, headport=n, color=gray]
BB4369 [shape=record label="{13054: construct [-,v42,v43,v44,v41]}" ] 
BB4369 -> BB4370 [tailport=s, headport=n, headlabel="      4370"]
BB4369 -> BB4384 [tailport=s, headport=n, color=gray]
BB4370 [shape=record label="{13055: function-expr[function ( name ),v45]}" ] 
BB4370 -> BB4371 [tailport=s, headport=n, headlabel="      4371"]
BB4371 [shape=record label="{13056: call-forEach [v39,v40,v41,v45,-]*}" ] 
BB4371 -> BB4372 [tailport=s, headport=n, headlabel="      4372"]
BB4371 -> BB4384 [tailport=s, headport=n, color=gray]
BB4372 [shape=record label="{13057: read-variable['forEach',v47,v46]|13058: read-variable['Array',v49,-]|13059: constant[\"indexOf\",v50]|13060: constant[\"lastIndexOf\",v51]|13061: constant[\"every\",v52]|13062: constant[\"some\",v53]}" ] 
BB4372 -> BB4373 [tailport=s, headport=n, headlabel="      4373"]
BB4372 -> BB4384 [tailport=s, headport=n, color=gray]
BB4373 [shape=record label="{13063: construct [-,v49,v50,v51,v52,v53,v48]}" ] 
BB4373 -> BB4374 [tailport=s, headport=n, headlabel="      4374"]
BB4373 -> BB4384 [tailport=s, headport=n, color=gray]
BB4374 [shape=record label="{13064: function-expr[function ( name ),v54]}" ] 
BB4374 -> BB4375 [tailport=s, headport=n, headlabel="      4375"]
BB4375 [shape=record label="{13065: call-forEach [v46,v47,v48,v54,-]*}" ] 
BB4375 -> BB4376 [tailport=s, headport=n, headlabel="      4376"]
BB4375 -> BB4384 [tailport=s, headport=n, color=gray]
BB4376 [shape=record label="{13066: read-variable['lang',v56,-]|13067: read-property[v56,'extend',-]|13068: \<variable-non-null-undef\>['lang']|13069: read-variable['NodeList',v57,-]|13070: new[v58]|13071: read-variable['nl',v59,-]|13072: write-property[v58,'constructor',v59]|13073: read-variable['nl',v60,-]|13074: write-property[v58,'_NodeListCtor',v60]|13075: function-expr[function ( ),v61]|13076: write-property[v58,'toString',v61]|13077: function-expr[function ( parent ),v62]|13078: write-property[v58,'_stash',v62]|13079: function-expr[function ( eventName listener ),v63]|13080: write-property[v58,'on',v63]|13081: function-expr[function ( ),v64]|13082: write-property[v58,'end',v64]|13083: function-expr[function ( item ),v65]|13084: write-property[v58,'concat',v65]|13085: function-expr[function ( func obj ),v66]|13086: write-property[v58,'map',v66]|13087: function-expr[function ( callback thisObj ),v67]|13088: write-property[v58,'forEach',v67]|13089: function-expr[function ( filter ),v68]|13090: write-property[v58,'filter',v68]|13091: function-expr[function ( declaredClass properties ),v69]|13092: write-property[v58,'instantiate',v69]|13093: function-expr[function ( ),v70]|13094: write-property[v58,'at',v70]}" ] 
BB4376 -> BB4377 [tailport=s, headport=n, headlabel="      4377"]
BB4376 -> BB4384 [tailport=s, headport=n, color=gray]
BB4377 [shape=record label="{13095: call-lang.extend [v56,'extend',v57,v58,-]*}" ] 
BB4377 -> BB4378 [tailport=s, headport=n, headlabel="      4378"]
BB4377 -> BB4384 [tailport=s, headport=n, color=gray]
BB4378 [shape=record label="{13096: read-variable['queryForEngine',v73,v72]|13097: read-variable['defaultEngine',v74,-]|13098: read-variable['NodeList',v75,-]}" ] 
BB4378 -> BB4379 [tailport=s, headport=n, headlabel="      4379"]
BB4378 -> BB4384 [tailport=s, headport=n, color=gray]
BB4379 [shape=record label="{13099: call-queryForEngine [v72,v73,v74,v75,v71]}" ] 
BB4379 -> BB4380 [tailport=s, headport=n, headlabel="      4380"]
BB4379 -> BB4384 [tailport=s, headport=n, color=gray]
BB4380 [shape=record label="{13100: write-variable[v71,'query']*|13101: read-variable['dojo',v77,-]|13102: read-variable['queryForEngine',v79,v78]|13103: read-variable['defaultEngine',v80,-]|13104: function-expr[function ( array ),v81]}" ] 
BB4380 -> BB4381 [tailport=s, headport=n, headlabel="      4381"]
BB4380 -> BB4384 [tailport=s, headport=n, color=gray]
BB4381 [shape=record label="{13105: call-queryForEngine [v78,v79,v80,v81,v76]}" ] 
BB4381 -> BB4382 [tailport=s, headport=n, headlabel="      4382"]
BB4381 -> BB4384 [tailport=s, headport=n, color=gray]
BB4382 [shape=record label="{13106: write-property[v77,'query',v76]|13107: \<variable-non-null-undef\>['dojo']*|13108: read-variable['query',v83,-]|13109: function-expr[function ( id parentRequire loaded ),v82]|13110: write-property[v83,'load',v82]|13111: \<variable-non-null-undef\>['query']*|13112: read-variable['dojo',v85,-]|13113: read-variable['query',v86,-]|13114: function-expr[function ( nodes selector root ),v84]|13115: write-property[v86,'_filterResult',v84]|13116: \<variable-non-null-undef\>['query']|13117: write-property[v85,'_filterQueryResult',v84]|13118: \<variable-non-null-undef\>['dojo']*|13119: read-variable['dojo',v88,-]|13120: read-variable['query',v89,-]|13121: read-variable['NodeList',v87,-]|13122: write-property[v89,'NodeList',v87]|13123: \<variable-non-null-undef\>['query']|13124: write-property[v88,'NodeList',v87]|13125: \<variable-non-null-undef\>['dojo']*|13126: read-variable['query',v1,-]}" ] 
BB4382 -> BB4383 [tailport=s, headport=n, headlabel="      4383"]
BB4382 -> BB4384 [tailport=s, headport=n, color=gray]
BB4383 [shape=record label="{13127: return[v1]}" ] 
BB4384 [shape=record label="{13128: exceptional-return}" ] 
//#$~ 6047
}
