digraph {
rankdir="TD"
BB_entry517[shape=none,label=""];
BB_entry517 -> BB8089 [tailport=s, headport=n, headlabel="    8089"]
BB8089 [shape=record label="{23929: constant[undefined,v1]|23930: vardecl['stopQueue']}" ] 
BB8089 -> BB8090 [tailport=s, headport=n, headlabel="      8090"]
BB8090 [shape=record label="{23931: function-expr[function(hooks),v2]|23932: write-variable[v2,'stopQueue']*|23933: typeof['type',v4]|23934: constant[\"string\",v5]|23935: !==[v4,v5,v3]|23936: if[v3](true-block:8091,false-block:8092)}" ] 
BB8090 -> BB8091 [tailport=s, headport=n, headlabel="      8091"]
BB8090 -> BB8092 [tailport=s, headport=n, headlabel="      8092"]
BB8090 -> BB8103 [tailport=s, headport=n, color=gray, headlabel="      8103"]
BB8091 [shape=record label="{23937: read-variable['clearQueue',v6,-]|23938: write-variable[v6,'gotoEnd']*|23939: read-variable['type',v7,-]|23940: write-variable[v7,'clearQueue']*|23941: read-variable['undefined',v8,-]|23942: write-variable[v8,'type']*}" ] 
BB8091 -> BB8092 [tailport=s, headport=n]
BB8091 -> BB8103 [tailport=s, headport=n, color=gray]
BB8092 [shape=record label="{23943: read-variable['clearQueue',v6,-]|23944: if[v6](true-block:8093,false-block:8094)}" ] 
BB8092 -> BB8094 [tailport=s, headport=n, headlabel="      8094"]
BB8092 -> BB8093 [tailport=s, headport=n, headlabel="      8093"]
BB8092 -> BB8103 [tailport=s, headport=n, color=gray]
BB8093 [shape=record label="{23945: read-variable['type',v7,-]|23946: constant[false,v8]|23947: !==[v7,v8,v6]}" ] 
BB8093 -> BB8094 [tailport=s, headport=n]
BB8093 -> BB8103 [tailport=s, headport=n, color=gray]
BB8094 [shape=record label="{23948: if[v6](true-block:8095,false-block:8100)}" ] 
BB8094 -> BB8095 [tailport=s, headport=n, headlabel="      8095"]
BB8094 -> BB8100 [tailport=s, headport=n, headlabel="      8100"]
BB8095 [shape=record label="{23949: read-variable['this',v8,-]|23950: read-property[v8,'queue',-]|23951: read-variable['type',v9,-]|23952: if[v9](true-block:8097,false-block:8096)}" ] 
BB8095 -> BB8097 [tailport=s, headport=n, headlabel="      8097"]
BB8095 -> BB8096 [tailport=s, headport=n, headlabel="      8096"]
BB8095 -> BB8103 [tailport=s, headport=n, color=gray]
BB8096 [shape=record label="{23953: constant[\"fx\",v9]}" ] 
BB8096 -> BB8097 [tailport=s, headport=n]
BB8097 [shape=record label="{23954: read-variable['Array',v11,-]}" ] 
BB8097 -> BB8098 [tailport=s, headport=n, headlabel="      8098"]
BB8097 -> BB8103 [tailport=s, headport=n, color=gray]
BB8098 [shape=record label="{23955: construct[-,v11,v10]}" ] 
BB8098 -> BB8099 [tailport=s, headport=n, headlabel="      8099"]
BB8098 -> BB8103 [tailport=s, headport=n, color=gray]
BB8099 [shape=record label="{23956: call[v8,'queue',v9,v10,-]*}" ] 
BB8099 -> BB8100 [tailport=s, headport=n]
BB8099 -> BB8103 [tailport=s, headport=n, color=gray]
BB8100 [shape=record label="{23957: read-variable['this',v8,-]|23958: read-property[v8,'each',-]|23959: function-expr[function(),v9]}" ] 
BB8100 -> BB8101 [tailport=s, headport=n, headlabel="      8101"]
BB8100 -> BB8103 [tailport=s, headport=n, color=gray]
BB8101 [shape=record label="{23960: call[v8,'each',v9,v1]}" ] 
BB8101 -> BB8102 [tailport=s, headport=n, headlabel="      8102"]
BB8101 -> BB8103 [tailport=s, headport=n, color=gray]
BB8102 [shape=record label="{23961: return[v1]}" ] 
BB8103 [shape=record label="{23962: exceptional-return}" ] 
}
