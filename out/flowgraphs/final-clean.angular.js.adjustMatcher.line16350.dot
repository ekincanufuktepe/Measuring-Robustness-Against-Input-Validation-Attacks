digraph {
rankdir="TD"
BB_entry893[shape=none,label=""];
BB_entry893 -> BB11566 [tailport=s, headport=n, headlabel="    11566"]
BB11566 [shape=record label="{30394: constant[undefined,v1]}" ] 
BB11566 -> BB11567 [tailport=s, headport=n, headlabel="      11567"]
BB11567 [shape=record label="{30395: read-variable['matcher',v3,-]|30396: constant[\"self\",v4]|30397: ===[v3,v4,v2]|30398: if[v2](true-block:11568,false-block:11569)}" ] 
BB11567 -> BB11568 [tailport=s, headport=n, headlabel="      11568"]
BB11567 -> BB11569 [tailport=s, headport=n, headlabel="      11569"]
BB11567 -> BB11595 [tailport=s, headport=n, color=gray, headlabel="      11595"]
BB11568 [shape=record label="{30399: read-variable['matcher',v1,-]}" ] 
BB11568 -> BB11594 [tailport=s, headport=n, headlabel="      11594"]
BB11568 -> BB11595 [tailport=s, headport=n, color=gray]
BB11569 [shape=record label="{30400: read-variable['isString',v7,v6]|30401: read-variable['matcher',v8,-]}" ] 
BB11569 -> BB11570 [tailport=s, headport=n, headlabel="      11570"]
BB11569 -> BB11595 [tailport=s, headport=n, color=gray]
BB11570 [shape=record label="{30402: call-isString [v6,v7,v8,v5]}" ] 
BB11570 -> BB11571 [tailport=s, headport=n, headlabel="      11571"]
BB11570 -> BB11595 [tailport=s, headport=n, color=gray]
BB11571 [shape=record label="{30403: if[v5](true-block:11572,false-block:11573)}" ] 
BB11571 -> BB11572 [tailport=s, headport=n, headlabel="      11572"]
BB11571 -> BB11573 [tailport=s, headport=n, headlabel="      11573"]
BB11572 [shape=record label="{30404: read-variable['matcher',v13,-]|30405: read-property[v13,'indexOf',-]|30406: \<variable-non-null-undef\>['matcher']|30407: constant[\"***\",v14]}" ] 
BB11572 -> BB11574 [tailport=s, headport=n, headlabel="      11574"]
BB11572 -> BB11595 [tailport=s, headport=n, color=gray]
BB11573 [shape=record label="{30408: read-variable['isRegExp',v11,v10]|30409: read-variable['matcher',v12,-]}" ] 
BB11573 -> BB11587 [tailport=s, headport=n, headlabel="      11587"]
BB11573 -> BB11595 [tailport=s, headport=n, color=gray]
BB11574 [shape=record label="{30410: call-matcher.indexOf [v13,'indexOf',v14,v10]}" ] 
BB11574 -> BB11575 [tailport=s, headport=n, headlabel="      11575"]
BB11574 -> BB11595 [tailport=s, headport=n, color=gray]
BB11575 [shape=record label="{30411: constant[-1.0,v11]|30412: \>[v10,v11,v9]|30413: if[v9](true-block:11576,false-block:11579)}" ] 
BB11575 -> BB11576 [tailport=s, headport=n, headlabel="      11576"]
BB11575 -> BB11579 [tailport=s, headport=n, headlabel="      11579"]
BB11575 -> BB11595 [tailport=s, headport=n, color=gray]
BB11576 [shape=record label="{30414: read-variable['$sceMinErr',v17,v16]|30415: constant[\"iwcard\",v18]|30416: constant[\"Illegal sequence *** in string matcher.  String: \\\{0\\\}\",v19]|30417: read-variable['matcher',v20,-]}" ] 
BB11576 -> BB11577 [tailport=s, headport=n, headlabel="      11577"]
BB11576 -> BB11595 [tailport=s, headport=n, color=gray]
BB11577 [shape=record label="{30418: call-$sceMinErr [v16,v17,v18,v19,v20,v15]}" ] 
BB11577 -> BB11578 [tailport=s, headport=n, headlabel="      11578"]
BB11577 -> BB11595 [tailport=s, headport=n, color=gray]
BB11578 [shape=record label="{30419: throw[v15]*}" ] 
BB11578 -> BB11579 [tailport=s, headport=n]
BB11578 -> BB11595 [tailport=s, headport=n, color=gray]
BB11579 [shape=record label="{30420: read-variable['escapeForRegexp',v21,v20]|30421: read-variable['matcher',v22,-]}" ] 
BB11579 -> BB11580 [tailport=s, headport=n, headlabel="      11580"]
BB11579 -> BB11595 [tailport=s, headport=n, color=gray]
BB11580 [shape=record label="{30422: call-escapeForRegexp [v20,v21,v22,v19]}" ] 
BB11580 -> BB11581 [tailport=s, headport=n, headlabel="      11581"]
BB11580 -> BB11595 [tailport=s, headport=n, color=gray]
BB11581 [shape=record label="{30423: read-property[v19,'replace',-]|30424: constant[\"\\\\*\\\\*\",v23]|30425: constant[\".*\",v24]}" ] 
BB11581 -> BB11582 [tailport=s, headport=n, headlabel="      11582"]
BB11581 -> BB11595 [tailport=s, headport=n, color=gray]
BB11582 [shape=record label="{30426: call-null [v19,'replace',v23,v24,v17]}" ] 
BB11582 -> BB11583 [tailport=s, headport=n, headlabel="      11583"]
BB11582 -> BB11595 [tailport=s, headport=n, color=gray]
BB11583 [shape=record label="{30427: read-property[v17,'replace',-]|30428: constant[\"\\\\*\",v25]|30429: constant[\"[^:/.?&;]*\",v26]}" ] 
BB11583 -> BB11584 [tailport=s, headport=n, headlabel="      11584"]
BB11583 -> BB11595 [tailport=s, headport=n, color=gray]
BB11584 [shape=record label="{30430: call-null [v17,'replace',v25,v26,v15]}" ] 
BB11584 -> BB11585 [tailport=s, headport=n, headlabel="      11585"]
BB11584 -> BB11595 [tailport=s, headport=n, color=gray]
BB11585 [shape=record label="{30431: write-variable[v15,'matcher']*|30432: read-variable['RegExp',v27,-]|30433: constant[\"^\",v31]|30434: read-variable['matcher',v32,-]|30435: +[v31,v32,v29]|30436: constant[\"$\",v30]|30437: +[v29,v30,v28]}" ] 
BB11585 -> BB11586 [tailport=s, headport=n, headlabel="      11586"]
BB11585 -> BB11595 [tailport=s, headport=n, color=gray]
BB11586 [shape=record label="{30438: construct [-,v27,v28,v1]}" ] 
BB11586 -> BB11594 [tailport=s, headport=n]
BB11586 -> BB11595 [tailport=s, headport=n, color=gray]
BB11587 [shape=record label="{30439: call-isRegExp [v10,v11,v12,v9]}" ] 
BB11587 -> BB11588 [tailport=s, headport=n, headlabel="      11588"]
BB11587 -> BB11595 [tailport=s, headport=n, color=gray]
BB11588 [shape=record label="{30440: if[v9](true-block:11589,false-block:11590)}" ] 
BB11588 -> BB11589 [tailport=s, headport=n, headlabel="      11589"]
BB11588 -> BB11590 [tailport=s, headport=n, headlabel="      11590"]
BB11589 [shape=record label="{30441: read-variable['RegExp',v13,-]|30442: constant[\"^\",v17]|30443: read-variable['matcher',v19,-]|30444: read-property[v19,'source',v18]|30445: \<variable-non-null-undef\>['matcher']|30446: +[v17,v18,v15]|30447: constant[\"$\",v16]|30448: +[v15,v16,v14]}" ] 
BB11589 -> BB11591 [tailport=s, headport=n, headlabel="      11591"]
BB11589 -> BB11595 [tailport=s, headport=n, color=gray]
BB11590 [shape=record label="{30449: read-variable['$sceMinErr',v15,v14]|30450: constant[\"imatcher\",v16]|30451: constant[\"Matchers may only be \\\"self\\\", string patterns or RegExp objects\",v17]}" ] 
BB11590 -> BB11592 [tailport=s, headport=n, headlabel="      11592"]
BB11590 -> BB11595 [tailport=s, headport=n, color=gray]
BB11591 [shape=record label="{30452: construct [-,v13,v14,v1]}" ] 
BB11591 -> BB11594 [tailport=s, headport=n]
BB11591 -> BB11595 [tailport=s, headport=n, color=gray]
BB11592 [shape=record label="{30453: call-$sceMinErr [v14,v15,v16,v17,v13]}" ] 
BB11592 -> BB11593 [tailport=s, headport=n, headlabel="      11593"]
BB11592 -> BB11595 [tailport=s, headport=n, color=gray]
BB11593 [shape=record label="{30454: throw[v13]*}" ] 
BB11593 -> BB11594 [tailport=s, headport=n]
BB11593 -> BB11595 [tailport=s, headport=n, color=gray]
BB11594 [shape=record label="{30455: return[v1]}" ] 
BB11595 [shape=record label="{30456: exceptional-return}" ] 
//#$~ 16373
}
