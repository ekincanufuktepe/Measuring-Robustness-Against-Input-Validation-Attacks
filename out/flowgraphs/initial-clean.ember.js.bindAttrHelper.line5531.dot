digraph {
rankdir="TD"
BB_entry259[shape=none,label=""];
BB_entry259 -> BB3215 [tailport=s, headport=n, headlabel="    3215"]
BB3215 [shape=record label="{10472: constant[undefined,v1]|10473: vardecl['element']|10474: vardecl['view']|10475: vardecl['classNameBindings']|10476: vardecl['classView']|10477: vardecl['attrKeys']|10478: vardecl['attr']|10479: vardecl['path']|10480: vardecl['lazyValue']|10481: vardecl['attrView']|10482: vardecl['i']|10483: vardecl['l']}" ] 
BB3215 -> BB3216 [tailport=s, headport=n, headlabel="      3216"]
BB3216 [shape=record label="{10484: read-variable['options',v3,-]|10485: read-property[v3,'element',v2]|10486: \<variable-non-null-undef\>['options']|10487: write-variable[v2,'element']*|10488: read-variable['Ember',v5,-]|10489: read-property[v5,'assert',-]|10490: \<variable-non-null-undef\>['Ember']|10491: constant[\"You must specify at least one hash argument to bind-attr\",v6]|10492: read-variable['keys',v12,v11]|10493: read-variable['hash',v13,-]}" ] 
BB3216 -> BB3217 [tailport=s, headport=n, headlabel="      3217"]
BB3216 -> BB3268 [tailport=s, headport=n, color=gray, headlabel="      3268"]
BB3217 [shape=record label="{10494: call-keys [v11,v12,v13,v10]}" ] 
BB3217 -> BB3218 [tailport=s, headport=n, headlabel="      3218"]
BB3217 -> BB3268 [tailport=s, headport=n, color=gray]
BB3218 [shape=record label="{10495: read-property[v10,'length',v9]|10496: ![v9,v8]|10497: ![v8,v7]}" ] 
BB3218 -> BB3219 [tailport=s, headport=n, headlabel="      3219"]
BB3218 -> BB3268 [tailport=s, headport=n, color=gray]
BB3219 [shape=record label="{10498: call-Ember.assert [v5,'assert',v6,v7,-]*}" ] 
BB3219 -> BB3220 [tailport=s, headport=n, headlabel="      3220"]
BB3219 -> BB3268 [tailport=s, headport=n, color=gray]
BB3220 [shape=record label="{10499: read-variable['this',v14,-]|10500: write-variable[v14,'view']*|10501: read-variable['hash',v16,-]|10502: read-property[v16,'class',v15]|10503: \<variable-non-null-undef\>['hash']|10504: write-variable[v15,'classNameBindings']*|10505: read-variable['classNameBindings',v18,-]|10506: constant[null,v19]|10507: !==[v18,v19,v17]|10508: if[v17](true-block:3221,false-block:3222)}" ] 
BB3220 -> BB3222 [tailport=s, headport=n, headlabel="      3222"]
BB3220 -> BB3221 [tailport=s, headport=n, headlabel="      3221"]
BB3220 -> BB3268 [tailport=s, headport=n, color=gray]
BB3221 [shape=record label="{10509: read-variable['classNameBindings',v20,-]|10510: read-variable['undefined',v21,-]|10511: !==[v20,v21,v17]}" ] 
BB3221 -> BB3222 [tailport=s, headport=n]
BB3221 -> BB3268 [tailport=s, headport=n, color=gray]
BB3222 [shape=record label="{10512: if[v17](true-block:3223,false-block:3239)}" ] 
BB3222 -> BB3223 [tailport=s, headport=n, headlabel="      3223"]
BB3222 -> BB3239 [tailport=s, headport=n, headlabel="      3239"]
BB3223 [shape=record label="{10513: read-variable['isStream',v23,v22]|10514: read-variable['classNameBindings',v24,-]}" ] 
BB3223 -> BB3224 [tailport=s, headport=n, headlabel="      3224"]
BB3223 -> BB3268 [tailport=s, headport=n, color=gray]
BB3224 [shape=record label="{10515: call-isStream [v22,v23,v24,v21]}" ] 
BB3224 -> BB3225 [tailport=s, headport=n, headlabel="      3225"]
BB3224 -> BB3268 [tailport=s, headport=n, color=gray]
BB3225 [shape=record label="{10516: ![v21,v20]|10517: if[v20](true-block:3226,false-block:3229)}" ] 
BB3225 -> BB3226 [tailport=s, headport=n, headlabel="      3226"]
BB3225 -> BB3229 [tailport=s, headport=n, headlabel="      3229"]
BB3225 -> BB3268 [tailport=s, headport=n, color=gray]
BB3226 [shape=record label="{10518: read-variable['applyClassNameBindings',v27,v26]|10519: read-variable['classNameBindings',v28,-]|10520: read-variable['view',v29,-]}" ] 
BB3226 -> BB3227 [tailport=s, headport=n, headlabel="      3227"]
BB3226 -> BB3268 [tailport=s, headport=n, color=gray]
BB3227 [shape=record label="{10521: call-applyClassNameBindings [v26,v27,v28,v29,v25]}" ] 
BB3227 -> BB3228 [tailport=s, headport=n, headlabel="      3228"]
BB3227 -> BB3268 [tailport=s, headport=n, color=gray]
BB3228 [shape=record label="{10522: write-variable[v25,'classNameBindings']*}" ] 
BB3228 -> BB3229 [tailport=s, headport=n]
BB3229 [shape=record label="{10523: read-variable['AttrNode',v26,-]|10524: constant[\"class\",v27]|10525: read-variable['classNameBindings',v28,-]}" ] 
BB3229 -> BB3230 [tailport=s, headport=n, headlabel="      3230"]
BB3229 -> BB3268 [tailport=s, headport=n, color=gray]
BB3230 [shape=record label="{10526: construct [-,v26,v27,v28,v25]}" ] 
BB3230 -> BB3231 [tailport=s, headport=n, headlabel="      3231"]
BB3230 -> BB3268 [tailport=s, headport=n, color=gray]
BB3231 [shape=record label="{10527: write-variable[v25,'classView']*|10528: read-variable['classView',v30,-]|10529: read-variable['env',v33,-]|10530: read-property[v33,'dom',v32]|10531: \<variable-non-null-undef\>['env']|10532: read-property[v32,'createAttrMorph',-]|10533: \<property-non-null-undef\>[v33,'dom']|10534: read-variable['element',v34,-]|10535: constant[\"class\",v35]}" ] 
BB3231 -> BB3232 [tailport=s, headport=n, headlabel="      3232"]
BB3231 -> BB3268 [tailport=s, headport=n, color=gray]
BB3232 [shape=record label="{10536: call-env.dom.createAttrMorph [v32,'createAttrMorph',v34,v35,v29]}" ] 
BB3232 -> BB3233 [tailport=s, headport=n, headlabel="      3233"]
BB3232 -> BB3268 [tailport=s, headport=n, color=gray]
BB3233 [shape=record label="{10537: write-property[v30,'_morph',v29]|10538: \<variable-non-null-undef\>['classView']*|10539: read-variable['Ember',v37,-]|10540: read-property[v37,'assert',-]|10541: \<variable-non-null-undef\>['Ember']|10542: constant[\"You cannot set `class` manually and via `\\\{\\\{bind-attr\\\}\\\}` helper on the same element. \",v39]|10543: constant[\"Please use `\\\{\\\{bind-attr\\\}\\\}`'s `:static-class` syntax instead.\",v40]|10544: +[v39,v40,v38]|10545: read-variable['element',v44,-]|10546: read-property[v44,'getAttribute',-]|10547: \<variable-non-null-undef\>['element']|10548: constant[\"class\",v45]}" ] 
BB3233 -> BB3234 [tailport=s, headport=n, headlabel="      3234"]
BB3233 -> BB3268 [tailport=s, headport=n, color=gray]
BB3234 [shape=record label="{10549: call-element.getAttribute [v44,'getAttribute',v45,v42]}" ] 
BB3234 -> BB3235 [tailport=s, headport=n, headlabel="      3235"]
BB3234 -> BB3268 [tailport=s, headport=n, color=gray]
BB3235 [shape=record label="{10550: ![v42,v41]}" ] 
BB3235 -> BB3236 [tailport=s, headport=n, headlabel="      3236"]
BB3235 -> BB3268 [tailport=s, headport=n, color=gray]
BB3236 [shape=record label="{10551: call-Ember.assert [v37,'assert',v38,v41,-]*}" ] 
BB3236 -> BB3237 [tailport=s, headport=n, headlabel="      3237"]
BB3236 -> BB3268 [tailport=s, headport=n, color=gray]
BB3237 [shape=record label="{10552: read-variable['view',v47,-]|10553: read-property[v47,'appendChild',-]|10554: \<variable-non-null-undef\>['view']|10555: read-variable['classView',v48,-]}" ] 
BB3237 -> BB3238 [tailport=s, headport=n, headlabel="      3238"]
BB3237 -> BB3268 [tailport=s, headport=n, color=gray]
BB3238 [shape=record label="{10556: call-view.appendChild [v47,'appendChild',v48,-]*}" ] 
BB3238 -> BB3239 [tailport=s, headport=n]
BB3238 -> BB3268 [tailport=s, headport=n, color=gray]
BB3239 [shape=record label="{10557: read-variable['keys',v22,v21]|10558: read-variable['hash',v23,-]}" ] 
BB3239 -> BB3240 [tailport=s, headport=n, headlabel="      3240"]
BB3239 -> BB3268 [tailport=s, headport=n, color=gray]
BB3240 [shape=record label="{10559: call-keys [v21,v22,v23,v20]}" ] 
BB3240 -> BB3241 [tailport=s, headport=n, headlabel="      3241"]
BB3240 -> BB3268 [tailport=s, headport=n, color=gray]
BB3241 [shape=record label="{10560: write-variable[v20,'attrKeys']*|10561: constant[0.0,v25]|10562: write-variable[v25,'i']*|10563: read-variable['attrKeys',v27,-]|10564: read-property[v27,'length',v26]|10565: \<variable-non-null-undef\>['attrKeys']|10566: write-variable[v26,'l']*}" ] 
BB3241 -> BB3242 [tailport=s, headport=n, headlabel="      3242"]
BB3241 -> BB3268 [tailport=s, headport=n, color=gray]
BB3242 [shape=record label="{10567: read-variable['i',v28,-]|10568: read-variable['l',v29,-]|10569: \<[v28,v29,v24]|10570: if[v24](true-block:3243,false-block:3267)}" ] 
BB3242 -> BB3243 [tailport=s, headport=n, headlabel="      3243"]
BB3242 -> BB3267 [tailport=s, headport=n, headlabel="      3267"]
BB3242 -> BB3268 [tailport=s, headport=n, color=gray]
BB3243 [shape=record label="{10571: read-variable['attrKeys',v31,-]|10572: read-variable['i',v32,-]|10573: read-property[v31,v32,v30]|10574: \<variable-non-null-undef\>['attrKeys']|10575: write-variable[v30,'attr']*|10576: read-variable['attr',v34,-]|10577: constant[\"class\",v35]|10578: ===[v34,v35,v33]|10579: if[v33](true-block:3242,false-block:3244)}" ] 
BB3243 -> BB3242 [tailport=s, headport=n]
BB3243 -> BB3244 [tailport=s, headport=n, headlabel="      3244"]
BB3243 -> BB3268 [tailport=s, headport=n, color=gray]
BB3244 [shape=record label="{10580: read-variable['hash',v37,-]|10581: read-variable['attr',v38,-]|10582: read-property[v37,v38,v36]|10583: \<variable-non-null-undef\>['hash']|10584: write-variable[v36,'path']*|10585: read-variable['isStream',v41,v40]|10586: read-variable['path',v42,-]}" ] 
BB3244 -> BB3245 [tailport=s, headport=n, headlabel="      3245"]
BB3244 -> BB3268 [tailport=s, headport=n, color=gray]
BB3245 [shape=record label="{10587: call-isStream [v40,v41,v42,v39]}" ] 
BB3245 -> BB3246 [tailport=s, headport=n, headlabel="      3246"]
BB3245 -> BB3268 [tailport=s, headport=n, color=gray]
BB3246 [shape=record label="{10588: if[v39](true-block:3247,false-block:3248)}" ] 
BB3246 -> BB3247 [tailport=s, headport=n, headlabel="      3247"]
BB3246 -> BB3248 [tailport=s, headport=n, headlabel="      3248"]
BB3247 [shape=record label="{10589: read-variable['path',v43,-]|10590: write-variable[v43,'lazyValue']*}" ] 
BB3247 -> BB3256 [tailport=s, headport=n, headlabel="      3256"]
BB3247 -> BB3268 [tailport=s, headport=n, color=gray]
BB3248 [shape=record label="{10591: read-variable['Ember',v44,-]|10592: read-property[v44,'assert',-]|10593: \<variable-non-null-undef\>['Ember']|10594: read-variable['fmt',v47,v46]|10595: constant[\"You must provide an expression as the value of bound attribute.\",v49]|10596: constant[\" You specified: %@=%@\",v50]|10597: +[v49,v50,v48]|10598: read-variable['Array',v52,-]|10599: read-variable['attr',v53,-]|10600: read-variable['path',v54,-]}" ] 
BB3248 -> BB3249 [tailport=s, headport=n, headlabel="      3249"]
BB3248 -> BB3268 [tailport=s, headport=n, color=gray]
BB3249 [shape=record label="{10601: construct [-,v52,v53,v54,v51]}" ] 
BB3249 -> BB3250 [tailport=s, headport=n, headlabel="      3250"]
BB3249 -> BB3268 [tailport=s, headport=n, color=gray]
BB3250 [shape=record label="{10602: call-fmt [v46,v47,v48,v51,v45]}" ] 
BB3250 -> BB3251 [tailport=s, headport=n, headlabel="      3251"]
BB3250 -> BB3268 [tailport=s, headport=n, color=gray]
BB3251 [shape=record label="{10603: typeof['path',v56]|10604: constant[\"string\",v57]|10605: ===[v56,v57,v55]}" ] 
BB3251 -> BB3252 [tailport=s, headport=n, headlabel="      3252"]
BB3251 -> BB3268 [tailport=s, headport=n, color=gray]
BB3252 [shape=record label="{10606: call-Ember.assert [v44,'assert',v45,v55,-]*}" ] 
BB3252 -> BB3253 [tailport=s, headport=n, headlabel="      3253"]
BB3252 -> BB3268 [tailport=s, headport=n, color=gray]
BB3253 [shape=record label="{10607: read-variable['view',v60,-]|10608: read-property[v60,'getStream',-]|10609: \<variable-non-null-undef\>['view']|10610: read-variable['path',v61,-]}" ] 
BB3253 -> BB3254 [tailport=s, headport=n, headlabel="      3254"]
BB3253 -> BB3268 [tailport=s, headport=n, color=gray]
BB3254 [shape=record label="{10611: call-view.getStream [v60,'getStream',v61,v58]}" ] 
BB3254 -> BB3255 [tailport=s, headport=n, headlabel="      3255"]
BB3254 -> BB3268 [tailport=s, headport=n, color=gray]
BB3255 [shape=record label="{10612: write-variable[v58,'lazyValue']*}" ] 
BB3255 -> BB3256 [tailport=s, headport=n]
BB3256 [shape=record label="{10613: read-variable['LegacyBindAttrNode',v44,-]|10614: read-variable['attr',v45,-]|10615: read-variable['lazyValue',v46,-]}" ] 
BB3256 -> BB3257 [tailport=s, headport=n, headlabel="      3257"]
BB3256 -> BB3268 [tailport=s, headport=n, color=gray]
BB3257 [shape=record label="{10616: construct [-,v44,v45,v46,v43]}" ] 
BB3257 -> BB3258 [tailport=s, headport=n, headlabel="      3258"]
BB3257 -> BB3268 [tailport=s, headport=n, color=gray]
BB3258 [shape=record label="{10617: write-variable[v43,'attrView']*|10618: read-variable['attrView',v48,-]|10619: read-variable['env',v51,-]|10620: read-property[v51,'dom',v50]|10621: \<variable-non-null-undef\>['env']|10622: read-property[v50,'createAttrMorph',-]|10623: \<property-non-null-undef\>[v51,'dom']|10624: read-variable['element',v52,-]|10625: read-variable['attr',v53,-]}" ] 
BB3258 -> BB3259 [tailport=s, headport=n, headlabel="      3259"]
BB3258 -> BB3268 [tailport=s, headport=n, color=gray]
BB3259 [shape=record label="{10626: call-env.dom.createAttrMorph [v50,'createAttrMorph',v52,v53,v47]}" ] 
BB3259 -> BB3260 [tailport=s, headport=n, headlabel="      3260"]
BB3259 -> BB3268 [tailport=s, headport=n, color=gray]
BB3260 [shape=record label="{10627: write-property[v48,'_morph',v47]|10628: \<variable-non-null-undef\>['attrView']*|10629: read-variable['Ember',v55,-]|10630: read-property[v55,'assert',-]|10631: \<variable-non-null-undef\>['Ember']|10632: constant[\"You cannot set `\",v59]|10633: read-variable['attr',v60,-]|10634: +[v59,v60,v57]|10635: constant[\"` manually and via `\\\{\\\{bind-attr\\\}\\\}` helper on the same element.\",v58]|10636: +[v57,v58,v56]|10637: read-variable['element',v64,-]|10638: read-property[v64,'getAttribute',-]|10639: \<variable-non-null-undef\>['element']|10640: read-variable['attr',v65,-]}" ] 
BB3260 -> BB3261 [tailport=s, headport=n, headlabel="      3261"]
BB3260 -> BB3268 [tailport=s, headport=n, color=gray]
BB3261 [shape=record label="{10641: call-element.getAttribute [v64,'getAttribute',v65,v62]}" ] 
BB3261 -> BB3262 [tailport=s, headport=n, headlabel="      3262"]
BB3261 -> BB3268 [tailport=s, headport=n, color=gray]
BB3262 [shape=record label="{10642: ![v62,v61]}" ] 
BB3262 -> BB3263 [tailport=s, headport=n, headlabel="      3263"]
BB3262 -> BB3268 [tailport=s, headport=n, color=gray]
BB3263 [shape=record label="{10643: call-Ember.assert [v55,'assert',v56,v61,-]*}" ] 
BB3263 -> BB3264 [tailport=s, headport=n, headlabel="      3264"]
BB3263 -> BB3268 [tailport=s, headport=n, color=gray]
BB3264 [shape=record label="{10644: read-variable['view',v67,-]|10645: read-property[v67,'appendChild',-]|10646: \<variable-non-null-undef\>['view']|10647: read-variable['attrView',v68,-]}" ] 
BB3264 -> BB3265 [tailport=s, headport=n, headlabel="      3265"]
BB3264 -> BB3268 [tailport=s, headport=n, color=gray]
BB3265 [shape=record label="{10648: call-view.appendChild [v67,'appendChild',v68,-]*}" ] 
BB3265 -> BB3266 [tailport=s, headport=n, headlabel="      3266"]
BB3265 -> BB3268 [tailport=s, headport=n, color=gray]
BB3266 [shape=record label="{10649: constant[1.0,v69]|10650: read-variable['i',v70,-]|10651: +[v70,v71]|10652: +[v71,v69,v72]|10653: write-variable[v72,'i']}" ] 
BB3266 -> BB3242 [tailport=s, headport=n]
BB3266 -> BB3268 [tailport=s, headport=n, color=gray]
BB3267 [shape=record label="{10654: return[v1]}" ] 
BB3268 [shape=record label="{10655: exceptional-return}" ] 
//#$~ 5560
}
