digraph {
rankdir="TD"
BB_entry1830[shape=none,label=""];
BB_entry1830 -> BB20918 [tailport=s, headport=n, headlabel="    20918"]
BB20918 [shape=record label="{70087: constant[undefined,v1]|70088: vardecl['value']|70089: vardecl['viewClass']}" ] 
BB20918 -> BB20919 [tailport=s, headport=n, headlabel="      20919"]
BB20919 [shape=record label="{70090: read-variable['read',v4,v3]|70091: read-variable['object',v5,-]}" ] 
BB20919 -> BB20920 [tailport=s, headport=n, headlabel="      20920"]
BB20919 -> BB20946 [tailport=s, headport=n, color=gray, headlabel="      20946"]
BB20920 [shape=record label="{70092: call-read [v3,v4,v5,v2]}" ] 
BB20920 -> BB20921 [tailport=s, headport=n, headlabel="      20921"]
BB20920 -> BB20946 [tailport=s, headport=n, color=gray]
BB20921 [shape=record label="{70093: write-variable[v2,'value']*|70094: typeof['value',v7]|70095: constant[\"string\",v8]|70096: ===[v7,v8,v6]|70097: if[v6](true-block:20922,false-block:20923)}" ] 
BB20921 -> BB20922 [tailport=s, headport=n, headlabel="      20922"]
BB20921 -> BB20923 [tailport=s, headport=n, headlabel="      20923"]
BB20921 -> BB20946 [tailport=s, headport=n, color=gray]
BB20922 [shape=record label="{70098: read-variable['isGlobal',v11,v10]|70099: read-variable['value',v12,-]}" ] 
BB20922 -> BB20924 [tailport=s, headport=n, headlabel="      20924"]
BB20922 -> BB20946 [tailport=s, headport=n, color=gray]
BB20923 [shape=record label="{70100: read-variable['value',v9,-]|70101: write-variable[v9,'viewClass']*}" ] 
BB20923 -> BB20935 [tailport=s, headport=n, headlabel="      20935"]
BB20923 -> BB20946 [tailport=s, headport=n, color=gray]
BB20924 [shape=record label="{70102: call-isGlobal [v10,v11,v12,v9]}" ] 
BB20924 -> BB20925 [tailport=s, headport=n, headlabel="      20925"]
BB20924 -> BB20946 [tailport=s, headport=n, color=gray]
BB20925 [shape=record label="{70103: if[v9](true-block:20926,false-block:20927)}" ] 
BB20925 -> BB20926 [tailport=s, headport=n, headlabel="      20926"]
BB20925 -> BB20927 [tailport=s, headport=n, headlabel="      20927"]
BB20926 [shape=record label="{70104: read-variable['get',v15,v14]|70105: constant[null,v16]|70106: read-variable['value',v17,-]}" ] 
BB20926 -> BB20928 [tailport=s, headport=n, headlabel="      20928"]
BB20926 -> BB20946 [tailport=s, headport=n, color=gray]
BB20927 [shape=record label="{70107: read-variable['Ember',v14,-]|70108: read-property[v14,'assert',-]|70109: \<variable-non-null-undef\>['Ember']|70110: constant[\"View requires a container to resolve views not passed in through the context\",v15]|70111: read-variable['container',v18,-]|70112: ![v18,v17]|70113: ![v17,v16]}" ] 
BB20927 -> BB20931 [tailport=s, headport=n, headlabel="      20931"]
BB20927 -> BB20946 [tailport=s, headport=n, color=gray]
BB20928 [shape=record label="{70114: call-get [v14,v15,v16,v17,v13]}" ] 
BB20928 -> BB20929 [tailport=s, headport=n, headlabel="      20929"]
BB20928 -> BB20946 [tailport=s, headport=n, color=gray]
BB20929 [shape=record label="{70115: write-variable[v13,'viewClass']*|70116: read-variable['Ember',v19,-]|70117: read-property[v19,'deprecate',-]|70118: \<variable-non-null-undef\>['Ember']|70119: constant[\"Resolved the view \\\"\",v23]|70120: read-variable['value',v24,-]|70121: +[v23,v24,v21]|70122: constant[\"\\\" on the global context. Pass a view name to be looked up on the container instead, such as \\\{\\\{view \\\"select\\\"\\\}\\\}.\",v22]|70123: +[v21,v22,v20]|70124: read-variable['viewClass',v26,-]|70125: ![v26,v25]|70126: new[v27]|70127: constant[\"http://emberjs.com/guides/deprecations/#toc_global-lookup-of-views\",v28]|70128: write-property[v27,'url',v28]}" ] 
BB20929 -> BB20930 [tailport=s, headport=n, headlabel="      20930"]
BB20929 -> BB20946 [tailport=s, headport=n, color=gray]
BB20930 [shape=record label="{70129: call-Ember.deprecate [v19,'deprecate',v20,v25,v27,-]*}" ] 
BB20930 -> BB20935 [tailport=s, headport=n]
BB20930 -> BB20946 [tailport=s, headport=n, color=gray]
BB20931 [shape=record label="{70130: call-Ember.assert [v14,'assert',v15,v16,-]*}" ] 
BB20931 -> BB20932 [tailport=s, headport=n, headlabel="      20932"]
BB20931 -> BB20946 [tailport=s, headport=n, color=gray]
BB20932 [shape=record label="{70131: read-variable['container',v21,-]|70132: read-property[v21,'lookupFactory',-]|70133: \<variable-non-null-undef\>['container']|70134: constant[\"view:\",v23]|70135: read-variable['value',v24,-]|70136: +[v23,v24,v22]}" ] 
BB20932 -> BB20933 [tailport=s, headport=n, headlabel="      20933"]
BB20932 -> BB20946 [tailport=s, headport=n, color=gray]
BB20933 [shape=record label="{70137: call-container.lookupFactory [v21,'lookupFactory',v22,v19]}" ] 
BB20933 -> BB20934 [tailport=s, headport=n, headlabel="      20934"]
BB20933 -> BB20946 [tailport=s, headport=n, color=gray]
BB20934 [shape=record label="{70138: write-variable[v19,'viewClass']*}" ] 
BB20934 -> BB20935 [tailport=s, headport=n]
BB20935 [shape=record label="{70139: read-variable['Ember',v10,-]|70140: read-property[v10,'assert',-]|70141: \<variable-non-null-undef\>['Ember']|70142: read-variable['fmt',v13,v12]|70143: read-variable['value',v15,-]|70144: constant[\" must be a subclass or an instance of Ember.View, not %@\",v16]|70145: +[v15,v16,v14]|70146: read-variable['Array',v18,-]|70147: read-variable['viewClass',v19,-]}" ] 
BB20935 -> BB20936 [tailport=s, headport=n, headlabel="      20936"]
BB20935 -> BB20946 [tailport=s, headport=n, color=gray]
BB20936 [shape=record label="{70148: construct [-,v18,v19,v17]}" ] 
BB20936 -> BB20937 [tailport=s, headport=n, headlabel="      20937"]
BB20936 -> BB20946 [tailport=s, headport=n, color=gray]
BB20937 [shape=record label="{70149: call-fmt [v12,v13,v14,v17,v11]}" ] 
BB20937 -> BB20938 [tailport=s, headport=n, headlabel="      20938"]
BB20937 -> BB20946 [tailport=s, headport=n, color=gray]
BB20938 [shape=record label="{70150: read-variable['View',v22,-]|70151: read-property[v22,'detect',-]|70152: \<variable-non-null-undef\>['View']|70153: read-variable['viewClass',v23,-]}" ] 
BB20938 -> BB20939 [tailport=s, headport=n, headlabel="      20939"]
BB20938 -> BB20946 [tailport=s, headport=n, color=gray]
BB20939 [shape=record label="{70154: call-View.detect [v22,'detect',v23,v20]}" ] 
BB20939 -> BB20940 [tailport=s, headport=n, headlabel="      20940"]
BB20939 -> BB20946 [tailport=s, headport=n, color=gray]
BB20940 [shape=record label="{70155: if[v20](true-block:20943,false-block:20941)}" ] 
BB20940 -> BB20943 [tailport=s, headport=n, headlabel="      20943"]
BB20940 -> BB20941 [tailport=s, headport=n, headlabel="      20941"]
BB20941 [shape=record label="{70156: read-variable['View',v22,-]|70157: read-property[v22,'detectInstance',-]|70158: \<variable-non-null-undef\>['View']|70159: read-variable['viewClass',v23,-]}" ] 
BB20941 -> BB20942 [tailport=s, headport=n, headlabel="      20942"]
BB20941 -> BB20946 [tailport=s, headport=n, color=gray]
BB20942 [shape=record label="{70160: call-View.detectInstance [v22,'detectInstance',v23,v20]}" ] 
BB20942 -> BB20943 [tailport=s, headport=n]
BB20942 -> BB20946 [tailport=s, headport=n, color=gray]
BB20943 [shape=record label="{70161: call-Ember.assert [v10,'assert',v11,v20,-]*}" ] 
BB20943 -> BB20944 [tailport=s, headport=n, headlabel="      20944"]
BB20943 -> BB20946 [tailport=s, headport=n, color=gray]
BB20944 [shape=record label="{70162: read-variable['viewClass',v1,-]}" ] 
BB20944 -> BB20945 [tailport=s, headport=n, headlabel="      20945"]
BB20944 -> BB20946 [tailport=s, headport=n, color=gray]
BB20945 [shape=record label="{70163: return[v1]}" ] 
BB20946 [shape=record label="{70164: exceptional-return}" ] 
//#$~ 39333
}
