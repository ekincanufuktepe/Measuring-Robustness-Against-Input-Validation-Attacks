digraph {
rankdir="TD"
BB_entry401[shape=none,label=""];
BB_entry401 -> BB8120 [tailport=s, headport=n, headlabel="    8120"]
BB8120 [shape=record label="{24483: constant[undefined,v1]|24484: function-decl[function makeTest ( test ),-]|24485: function-decl[function Found ( node state ),-]|24486: function-decl[function skipThrough ( node st c ),-]|24487: function-decl[function ignore ( _node _st _c ),-]|24488: vardecl['base']|24489: function-decl[function makeScope ( prev isCatch ),-]|24490: function-decl[function normalScope ( scope ),-]}" ] 
BB8120 -> BB8121 [tailport=s, headport=n, headlabel="      8121"]
BB8121 [shape=record label="{24491: read-variable['exports',v3,-]|24492: function-expr[function ( node visitors base state ),v2]|24493: write-property[v3,'simple',v2]|24494: \<variable-non-null-undef\>['exports']*|24495: read-variable['exports',v5,-]|24496: function-expr[function ( node visitors base state ),v4]|24497: write-property[v5,'ancestor',v4]|24498: \<variable-non-null-undef\>['exports']*|24499: read-variable['exports',v7,-]|24500: function-expr[function ( node state funcs base ),v6]|24501: write-property[v7,'recursive',v6]|24502: \<variable-non-null-undef\>['exports']*|24503: read-variable['exports',v9,-]|24504: function-expr[function ( node start end test base state ),v8]|24505: write-property[v9,'findNodeAt',v8]|24506: \<variable-non-null-undef\>['exports']*|24507: read-variable['exports',v11,-]|24508: function-expr[function ( node pos test base state ),v10]|24509: write-property[v11,'findNodeAround',v10]|24510: \<variable-non-null-undef\>['exports']*|24511: read-variable['exports',v13,-]|24512: function-expr[function ( node pos test base state ),v12]|24513: write-property[v13,'findNodeAfter',v12]|24514: \<variable-non-null-undef\>['exports']*|24515: read-variable['exports',v15,-]|24516: function-expr[function ( node pos test base state ),v14]|24517: write-property[v15,'findNodeBefore',v14]|24518: \<variable-non-null-undef\>['exports']*|24519: read-variable['exports',v17,-]|24520: function-expr[function ( funcs base ),v16]|24521: write-property[v17,'make',v16]|24522: \<variable-non-null-undef\>['exports']*|24523: read-variable['exports',v19,-]|24524: new[v18]|24525: write-property[v19,'base',v18]|24526: \<variable-non-null-undef\>['exports']|24527: write-variable[v18,'base']*|24528: read-variable['base',v21,-]|24529: read-variable['base',v22,-]|24530: function-expr[function ( node st c ),v20]|24531: write-property[v22,'BlockStatement',v20]|24532: \<variable-non-null-undef\>['base']|24533: write-property[v21,'Program',v20]|24534: \<variable-non-null-undef\>['base']*|24535: read-variable['base',v24,-]|24536: read-variable['skipThrough',v23,-]|24537: write-property[v24,'Statement',v23]|24538: \<variable-non-null-undef\>['base']*|24539: read-variable['base',v26,-]|24540: read-variable['ignore',v25,-]|24541: write-property[v26,'EmptyStatement',v25]|24542: \<variable-non-null-undef\>['base']*|24543: read-variable['base',v28,-]|24544: function-expr[function ( node st c ),v27]|24545: write-property[v28,'ExpressionStatement',v27]|24546: \<variable-non-null-undef\>['base']*|24547: read-variable['base',v30,-]|24548: function-expr[function ( node st c ),v29]|24549: write-property[v30,'IfStatement',v29]|24550: \<variable-non-null-undef\>['base']*|24551: read-variable['base',v32,-]|24552: function-expr[function ( node st c ),v31]|24553: write-property[v32,'LabeledStatement',v31]|24554: \<variable-non-null-undef\>['base']*|24555: read-variable['base',v34,-]|24556: read-variable['base',v35,-]|24557: read-variable['ignore',v33,-]|24558: write-property[v35,'ContinueStatement',v33]|24559: \<variable-non-null-undef\>['base']|24560: write-property[v34,'BreakStatement',v33]|24561: \<variable-non-null-undef\>['base']*|24562: read-variable['base',v37,-]|24563: function-expr[function ( node st c ),v36]|24564: write-property[v37,'WithStatement',v36]|24565: \<variable-non-null-undef\>['base']*|24566: read-variable['base',v39,-]|24567: function-expr[function ( node st c ),v38]|24568: write-property[v39,'SwitchStatement',v38]|24569: \<variable-non-null-undef\>['base']*|24570: read-variable['base',v41,-]|24571: read-variable['base',v42,-]|24572: function-expr[function ( node st c ),v40]|24573: write-property[v42,'YieldExpression',v40]|24574: \<variable-non-null-undef\>['base']|24575: write-property[v41,'ReturnStatement',v40]|24576: \<variable-non-null-undef\>['base']*|24577: read-variable['base',v44,-]|24578: read-variable['base',v45,-]|24579: function-expr[function ( node st c ),v43]|24580: write-property[v45,'SpreadElement',v43]|24581: \<variable-non-null-undef\>['base']|24582: write-property[v44,'ThrowStatement',v43]|24583: \<variable-non-null-undef\>['base']*|24584: read-variable['base',v47,-]|24585: function-expr[function ( node st c ),v46]|24586: write-property[v47,'TryStatement',v46]|24587: \<variable-non-null-undef\>['base']*|24588: read-variable['base',v49,-]|24589: function-expr[function ( node st c ),v48]|24590: write-property[v49,'WhileStatement',v48]|24591: \<variable-non-null-undef\>['base']*|24592: read-variable['base',v51,-]|24593: read-variable['base',v52,-]|24594: read-property[v52,'WhileStatement',v50]|24595: \<variable-non-null-undef\>['base']|24596: write-property[v51,'DoWhileStatement',v50]|24597: \<variable-non-null-undef\>['base']*|24598: read-variable['base',v54,-]|24599: function-expr[function ( node st c ),v53]|24600: write-property[v54,'ForStatement',v53]|24601: \<variable-non-null-undef\>['base']*|24602: read-variable['base',v56,-]|24603: read-variable['base',v57,-]|24604: function-expr[function ( node st c ),v55]|24605: write-property[v57,'ForOfStatement',v55]|24606: \<variable-non-null-undef\>['base']|24607: write-property[v56,'ForInStatement',v55]|24608: \<variable-non-null-undef\>['base']*|24609: read-variable['base',v59,-]|24610: function-expr[function ( node st c ),v58]|24611: write-property[v59,'ForInit',v58]|24612: \<variable-non-null-undef\>['base']*|24613: read-variable['base',v61,-]|24614: read-variable['ignore',v60,-]|24615: write-property[v61,'DebuggerStatement',v60]|24616: \<variable-non-null-undef\>['base']*|24617: read-variable['base',v63,-]|24618: function-expr[function ( node st c ),v62]|24619: write-property[v63,'FunctionDeclaration',v62]|24620: \<variable-non-null-undef\>['base']*|24621: read-variable['base',v65,-]|24622: function-expr[function ( node st c ),v64]|24623: write-property[v65,'VariableDeclaration',v64]|24624: \<variable-non-null-undef\>['base']*|24625: read-variable['base',v67,-]|24626: function-expr[function ( node st c ),v66]|24627: write-property[v67,'Function',v66]|24628: \<variable-non-null-undef\>['base']*|24629: read-variable['base',v69,-]|24630: function-expr[function ( node st c ),v68]|24631: write-property[v69,'ScopeBody',v68]|24632: \<variable-non-null-undef\>['base']*|24633: read-variable['base',v71,-]|24634: read-variable['skipThrough',v70,-]|24635: write-property[v71,'Expression',v70]|24636: \<variable-non-null-undef\>['base']*|24637: read-variable['base',v73,-]|24638: read-variable['ignore',v72,-]|24639: write-property[v73,'ThisExpression',v72]|24640: \<variable-non-null-undef\>['base']*|24641: read-variable['base',v75,-]|24642: function-expr[function ( node st c ),v74]|24643: write-property[v75,'ArrayExpression',v74]|24644: \<variable-non-null-undef\>['base']*|24645: read-variable['base',v77,-]|24646: function-expr[function ( node st c ),v76]|24647: write-property[v77,'ObjectExpression',v76]|24648: \<variable-non-null-undef\>['base']*|24649: read-variable['base',v79,-]|24650: read-variable['base',v80,-]|24651: read-variable['base',v81,-]|24652: read-property[v81,'FunctionDeclaration',v78]|24653: \<variable-non-null-undef\>['base']|24654: write-property[v80,'ArrowFunctionExpression',v78]|24655: \<variable-non-null-undef\>['base']|24656: write-property[v79,'FunctionExpression',v78]|24657: \<variable-non-null-undef\>['base']*|24658: read-variable['base',v83,-]|24659: read-variable['base',v84,-]|24660: function-expr[function ( node st c ),v82]|24661: write-property[v84,'TemplateLiteral',v82]|24662: \<variable-non-null-undef\>['base']|24663: write-property[v83,'SequenceExpression',v82]|24664: \<variable-non-null-undef\>['base']*|24665: read-variable['base',v86,-]|24666: read-variable['base',v87,-]|24667: function-expr[function ( node st c ),v85]|24668: write-property[v87,'UpdateExpression',v85]|24669: \<variable-non-null-undef\>['base']|24670: write-property[v86,'UnaryExpression',v85]|24671: \<variable-non-null-undef\>['base']*|24672: read-variable['base',v89,-]|24673: read-variable['base',v90,-]|24674: read-variable['base',v91,-]|24675: function-expr[function ( node st c ),v88]|24676: write-property[v91,'LogicalExpression',v88]|24677: \<variable-non-null-undef\>['base']|24678: write-property[v90,'AssignmentExpression',v88]|24679: \<variable-non-null-undef\>['base']|24680: write-property[v89,'BinaryExpression',v88]|24681: \<variable-non-null-undef\>['base']*|24682: read-variable['base',v93,-]|24683: function-expr[function ( node st c ),v92]|24684: write-property[v93,'ConditionalExpression',v92]|24685: \<variable-non-null-undef\>['base']*|24686: read-variable['base',v95,-]|24687: read-variable['base',v96,-]|24688: function-expr[function ( node st c ),v94]|24689: write-property[v96,'CallExpression',v94]|24690: \<variable-non-null-undef\>['base']|24691: write-property[v95,'NewExpression',v94]|24692: \<variable-non-null-undef\>['base']*|24693: read-variable['base',v98,-]|24694: function-expr[function ( node st c ),v97]|24695: write-property[v98,'MemberExpression',v97]|24696: \<variable-non-null-undef\>['base']*|24697: read-variable['base',v100,-]|24698: read-variable['base',v101,-]|24699: read-variable['base',v102,-]|24700: read-variable['base',v103,-]|24701: read-variable['ignore',v99,-]|24702: write-property[v103,'ImportDeclaration',v99]|24703: \<variable-non-null-undef\>['base']|24704: write-property[v102,'ExportDeclaration',v99]|24705: \<variable-non-null-undef\>['base']|24706: write-property[v101,'Literal',v99]|24707: \<variable-non-null-undef\>['base']|24708: write-property[v100,'Identifier',v99]|24709: \<variable-non-null-undef\>['base']*|24710: read-variable['base',v105,-]|24711: function-expr[function ( node st c ),v104]|24712: write-property[v105,'TaggedTemplateExpression',v104]|24713: \<variable-non-null-undef\>['base']*|24714: read-variable['base',v107,-]|24715: read-variable['base',v108,-]|24716: function-expr[function ( node st c ),v106]|24717: write-property[v108,'ClassExpression',v106]|24718: \<variable-non-null-undef\>['base']|24719: write-property[v107,'ClassDeclaration',v106]|24720: \<variable-non-null-undef\>['base']*|24721: read-variable['base',v110,-]|24722: read-variable['base',v111,-]|24723: function-expr[function ( node st c ),v109]|24724: write-property[v111,'Property',v109]|24725: \<variable-non-null-undef\>['base']|24726: write-property[v110,'MethodDefinition',v109]|24727: \<variable-non-null-undef\>['base']*|24728: read-variable['base',v113,-]|24729: function-expr[function ( node st c ),v112]|24730: write-property[v113,'ComprehensionExpression',v112]|24731: \<variable-non-null-undef\>['base']*|24732: read-variable['exports',v115,-]|24733: read-variable['exports',v117,-]|24734: read-property[v117,'make',-]|24735: \<variable-non-null-undef\>['exports']|24736: new[v118]|24737: function-expr[function ( node scope c ),v119]|24738: write-property[v118,'Function',v119]|24739: function-expr[function ( node scope c ),v120]|24740: write-property[v118,'TryStatement',v120]|24741: function-expr[function ( node scope c ),v121]|24742: write-property[v118,'VariableDeclaration',v121]}" ] 
BB8121 -> BB8122 [tailport=s, headport=n, headlabel="      8122"]
BB8121 -> BB8125 [tailport=s, headport=n, color=gray, headlabel="      8125"]
BB8122 [shape=record label="{24743: call-exports.make [v117,'make',v118,v114]}" ] 
BB8122 -> BB8123 [tailport=s, headport=n, headlabel="      8123"]
BB8122 -> BB8125 [tailport=s, headport=n, color=gray]
BB8123 [shape=record label="{24744: write-property[v115,'scopeVisitor',v114]|24745: \<variable-non-null-undef\>['exports']*}" ] 
BB8123 -> BB8124 [tailport=s, headport=n, headlabel="      8124"]
BB8123 -> BB8125 [tailport=s, headport=n, color=gray]
BB8124 [shape=record label="{24746: return[v1]}" ] 
BB8125 [shape=record label="{24747: exceptional-return}" ] 
//#$~ 7457
}
