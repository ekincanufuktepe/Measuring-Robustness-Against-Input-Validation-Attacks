digraph {
rankdir="TD"
BB_entry92[shape=none,label=""];
BB_entry92 -> BB1537 [tailport=s, headport=n, headlabel="    1537"]
BB1537 [shape=record label="{4917: constant[undefined,v1]|4918: vardecl['captures']|4919: vardecl['type']|4920: vardecl['js']|4921: vardecl['isIf']|4922: vardecl['isElse']|4923: vardecl['tok']}" ] 
BB1537 -> BB1538 [tailport=s, headport=n, headlabel="      1538"]
BB1538 [shape=record label="{4924: read-variable['RegExp',v5,-]|4925: constant[\"^(if|unless|else if|else)\\\\b([^\\\\n]*)\",v6]}" ] 
BB1538 -> BB1539 [tailport=s, headport=n, headlabel="      1539"]
BB1538 -> BB1570 [tailport=s, headport=n, color=gray, headlabel="      1570"]
BB1539 [shape=record label="{4926: construct [-,v5,v6,v4]}" ] 
BB1539 -> BB1540 [tailport=s, headport=n, headlabel="      1540"]
BB1539 -> BB1570 [tailport=s, headport=n, color=gray]
BB1540 [shape=record label="{4927: read-property[v4,'exec',-]|4928: read-variable['this',v8,-]|4929: read-property[v8,'input',v7]}" ] 
BB1540 -> BB1541 [tailport=s, headport=n, headlabel="      1541"]
BB1540 -> BB1570 [tailport=s, headport=n, color=gray]
BB1541 [shape=record label="{4930: call-null [v4,'exec',v7,v2]}" ] 
BB1541 -> BB1542 [tailport=s, headport=n, headlabel="      1542"]
BB1541 -> BB1570 [tailport=s, headport=n, color=gray]
BB1542 [shape=record label="{4931: write-variable[v2,'captures']|4932: if[v2](true-block:1543,false-block:1569)}" ] 
BB1542 -> BB1543 [tailport=s, headport=n, headlabel="      1543"]
BB1542 -> BB1569 [tailport=s, headport=n, headlabel="      1569"]
BB1543 [shape=record label="{4933: read-variable['this',v10,-]|4934: read-property[v10,'consume',-]|4935: read-variable['captures',v13,-]|4936: constant[0.0,v14]|4937: read-property[v13,v14,v12]|4938: \<variable-non-null-undef\>['captures']|4939: read-property[v12,'length',v11]|4940: \<property-non-null-undef\>[v13,v14]}" ] 
BB1543 -> BB1544 [tailport=s, headport=n, headlabel="      1544"]
BB1543 -> BB1570 [tailport=s, headport=n, color=gray]
BB1544 [shape=record label="{4941: call-this.consume [v10,'consume',v11,-]*}" ] 
BB1544 -> BB1545 [tailport=s, headport=n, headlabel="      1545"]
BB1544 -> BB1570 [tailport=s, headport=n, color=gray]
BB1545 [shape=record label="{4942: read-variable['captures',v16,-]|4943: constant[1.0,v17]|4944: read-property[v16,v17,v15]|4945: \<variable-non-null-undef\>['captures']|4946: write-variable[v15,'type']*|4947: read-variable['captures',v19,-]|4948: constant[2.0,v20]|4949: read-property[v19,v20,v18]|4950: \<variable-non-null-undef\>['captures']|4951: write-variable[v18,'js']*|4952: constant[false,v21]|4953: write-variable[v21,'isIf']*|4954: constant[false,v22]|4955: write-variable[v22,'isElse']*|4956: read-variable['type',v23,-]|4957: constant[\"if\",v24]|4958: ==[v23,v24,v25]|4959: if[v25](true-block:1547,false-block:1548)}" ] 
BB1545 -> BB1547 [tailport=s, headport=n, headlabel="      1547"]
BB1545 -> BB1548 [tailport=s, headport=n, headlabel="      1548"]
BB1545 -> BB1570 [tailport=s, headport=n, color=gray]
BB1546 [shape=record label="{4960: read-variable['this',v28,-]|4961: read-property[v28,'tok',-]|4962: constant[\"code\",v29]|4963: read-variable['js',v30,-]}" ] 
BB1546 -> BB1567 [tailport=s, headport=n, headlabel="      1567"]
BB1546 -> BB1570 [tailport=s, headport=n, color=gray]
BB1547 [shape=record label="{4964: read-variable['assertExpression',v27,v26]|4965: read-variable['js',v28,-]}" ] 
BB1547 -> BB1549 [tailport=s, headport=n, headlabel="      1549"]
BB1547 -> BB1570 [tailport=s, headport=n, color=gray]
BB1548 [shape=record label="{4966: constant[\"unless\",v24]|4967: ==[v23,v24,v25]|4968: if[v25](true-block:1551,false-block:1552)}" ] 
BB1548 -> BB1551 [tailport=s, headport=n, headlabel="      1551"]
BB1548 -> BB1552 [tailport=s, headport=n, headlabel="      1552"]
BB1548 -> BB1570 [tailport=s, headport=n, color=gray]
BB1549 [shape=record label="{4969: call-assertExpression [v26,v27,v28,-]*}" ] 
BB1549 -> BB1550 [tailport=s, headport=n, headlabel="      1550"]
BB1549 -> BB1570 [tailport=s, headport=n, color=gray]
BB1550 [shape=record label="{4970: constant[\"if (\",v32]|4971: read-variable['js',v33,-]|4972: +[v32,v33,v30]|4973: constant[\")\",v31]|4974: +[v30,v31,v29]|4975: write-variable[v29,'js']*|4976: constant[true,v34]|4977: write-variable[v34,'isIf']*}" ] 
BB1550 -> BB1546 [tailport=s, headport=n, headlabel="      1546"]
BB1550 -> BB1570 [tailport=s, headport=n, color=gray]
BB1551 [shape=record label="{4978: read-variable['assertExpression',v36,v35]|4979: read-variable['js',v37,-]}" ] 
BB1551 -> BB1553 [tailport=s, headport=n, headlabel="      1553"]
BB1551 -> BB1570 [tailport=s, headport=n, color=gray]
BB1552 [shape=record label="{4980: constant[\"else if\",v24]|4981: ==[v23,v24,v25]|4982: if[v25](true-block:1555,false-block:1556)}" ] 
BB1552 -> BB1555 [tailport=s, headport=n, headlabel="      1555"]
BB1552 -> BB1556 [tailport=s, headport=n, headlabel="      1556"]
BB1552 -> BB1570 [tailport=s, headport=n, color=gray]
BB1553 [shape=record label="{4983: call-assertExpression [v35,v36,v37,-]*}" ] 
BB1553 -> BB1554 [tailport=s, headport=n, headlabel="      1554"]
BB1553 -> BB1570 [tailport=s, headport=n, color=gray]
BB1554 [shape=record label="{4984: constant[\"if (!(\",v41]|4985: read-variable['js',v42,-]|4986: +[v41,v42,v39]|4987: constant[\"))\",v40]|4988: +[v39,v40,v38]|4989: write-variable[v38,'js']*|4990: constant[true,v43]|4991: write-variable[v43,'isIf']*}" ] 
BB1554 -> BB1546 [tailport=s, headport=n]
BB1554 -> BB1570 [tailport=s, headport=n, color=gray]
BB1555 [shape=record label="{4992: read-variable['assertExpression',v45,v44]|4993: read-variable['js',v46,-]}" ] 
BB1555 -> BB1557 [tailport=s, headport=n, headlabel="      1557"]
BB1555 -> BB1570 [tailport=s, headport=n, color=gray]
BB1556 [shape=record label="{4994: constant[\"else\",v24]|4995: ==[v23,v24,v25]|4996: if[v25](true-block:1559,false-block:1546)}" ] 
BB1556 -> BB1559 [tailport=s, headport=n, headlabel="      1559"]
BB1556 -> BB1546 [tailport=s, headport=n]
BB1556 -> BB1570 [tailport=s, headport=n, color=gray]
BB1557 [shape=record label="{4997: call-assertExpression [v44,v45,v46,-]*}" ] 
BB1557 -> BB1558 [tailport=s, headport=n, headlabel="      1558"]
BB1557 -> BB1570 [tailport=s, headport=n, color=gray]
BB1558 [shape=record label="{4998: constant[\"else if (\",v50]|4999: read-variable['js',v51,-]|5000: +[v50,v51,v48]|5001: constant[\")\",v49]|5002: +[v48,v49,v47]|5003: write-variable[v47,'js']*|5004: constant[true,v52]|5005: write-variable[v52,'isIf']*|5006: constant[true,v53]|5007: write-variable[v53,'isElse']*}" ] 
BB1558 -> BB1546 [tailport=s, headport=n]
BB1558 -> BB1570 [tailport=s, headport=n, color=gray]
BB1559 [shape=record label="{5008: read-variable['js',v54,-]|5009: if[v54](true-block:1560,false-block:1562)}" ] 
BB1559 -> BB1562 [tailport=s, headport=n, headlabel="      1562"]
BB1559 -> BB1560 [tailport=s, headport=n, headlabel="      1560"]
BB1559 -> BB1570 [tailport=s, headport=n, color=gray]
BB1560 [shape=record label="{5010: read-variable['js',v56,-]|5011: read-property[v56,'trim',-]|5012: \<variable-non-null-undef\>['js']}" ] 
BB1560 -> BB1561 [tailport=s, headport=n, headlabel="      1561"]
BB1560 -> BB1570 [tailport=s, headport=n, color=gray]
BB1561 [shape=record label="{5013: call-js.trim [v56,'trim',v54]}" ] 
BB1561 -> BB1562 [tailport=s, headport=n]
BB1561 -> BB1570 [tailport=s, headport=n, color=gray]
BB1562 [shape=record label="{5014: if[v54](true-block:1563,false-block:1566)}" ] 
BB1562 -> BB1563 [tailport=s, headport=n, headlabel="      1563"]
BB1562 -> BB1566 [tailport=s, headport=n, headlabel="      1566"]
BB1563 [shape=record label="{5015: read-variable['Error',v56,-]|5016: constant[\"`else` cannot have a condition, perhaps you meant `else if`\",v57]}" ] 
BB1563 -> BB1564 [tailport=s, headport=n, headlabel="      1564"]
BB1563 -> BB1570 [tailport=s, headport=n, color=gray]
BB1564 [shape=record label="{5017: construct [-,v56,v57,v55]}" ] 
BB1564 -> BB1565 [tailport=s, headport=n, headlabel="      1565"]
BB1564 -> BB1570 [tailport=s, headport=n, color=gray]
BB1565 [shape=record label="{5018: throw[v55]*}" ] 
BB1565 -> BB1566 [tailport=s, headport=n]
BB1565 -> BB1570 [tailport=s, headport=n, color=gray]
BB1566 [shape=record label="{5019: constant[\"else\",v55]|5020: write-variable[v55,'js']*|5021: constant[true,v56]|5022: write-variable[v56,'isElse']*}" ] 
BB1566 -> BB1546 [tailport=s, headport=n]
BB1567 [shape=record label="{5023: call-this.tok [v28,'tok',v29,v30,v26]}" ] 
BB1567 -> BB1568 [tailport=s, headport=n, headlabel="      1568"]
BB1567 -> BB1570 [tailport=s, headport=n, color=gray]
BB1568 [shape=record label="{5024: write-variable[v26,'tok']*|5025: read-variable['tok',v32,-]|5026: read-variable['isElse',v31,-]|5027: write-property[v32,'isElse',v31]|5028: \<variable-non-null-undef\>['tok']*|5029: read-variable['tok',v34,-]|5030: read-variable['isIf',v33,-]|5031: write-property[v34,'isIf',v33]|5032: \<variable-non-null-undef\>['tok']*|5033: read-variable['tok',v36,-]|5034: constant[true,v35]|5035: write-property[v36,'requiresBlock',v35]|5036: \<variable-non-null-undef\>['tok']*|5037: read-variable['tok',v1,-]}" ] 
BB1568 -> BB1569 [tailport=s, headport=n]
BB1568 -> BB1570 [tailport=s, headport=n, color=gray]
BB1569 [shape=record label="{5038: return[v1]}" ] 
BB1570 [shape=record label="{5039: exceptional-return}" ] 
//#$~ 1724
}
