digraph {
rankdir="TD"
BB_entry632[shape=none,label=""];
BB_entry632 -> BB8544 [tailport=s, headport=n, headlabel="    8544"]
BB8544 [shape=record label="{28247: constant[undefined,v1]}" ] 
BB8544 -> BB8545 [tailport=s, headport=n, headlabel="      8545"]
BB8545 [shape=record label="{28248: read-variable['ensureInjected',v3,v2]}" ] 
BB8545 -> BB8546 [tailport=s, headport=n, headlabel="      8546"]
BB8545 -> BB8558 [tailport=s, headport=n, color=gray, headlabel="      8558"]
BB8546 [shape=record label="{28249: call-ensureInjected [v2,v3,-]*}" ] 
BB8546 -> BB8547 [tailport=s, headport=n, headlabel="      8547"]
BB8546 -> BB8558 [tailport=s, headport=n, color=gray]
BB8547 [shape=record label="{28250: constant[\"production\",v5]|28251: constant[\"development\",v6]|28252: !==[v5,v6,v4]|28253: if[v4](true-block:8548,false-block:8549)}" ] 
BB8547 -> BB8548 [tailport=s, headport=n, headlabel="      8548"]
BB8547 -> BB8549 [tailport=s, headport=n, headlabel="      8549"]
BB8547 -> BB8558 [tailport=s, headport=n, color=gray]
BB8548 [shape=record label="{28254: read-variable['warning',v8,v7]|28255: read-variable['ReactCurrentOwner',v12,-]|28256: read-property[v12,'current',v10]|28257: \<variable-non-null-undef\>['ReactCurrentOwner']|28258: constant[null,v11]|28259: ==[v10,v11,v9]|28260: constant[\"enqueueUpdate(): Render methods should be a pure function of props \",v18]|28261: constant[\"and state; triggering nested component updates from render is not \",v19]|28262: +[v18,v19,v16]|28263: constant[\"allowed. If necessary, trigger nested updates in \",v17]|28264: +[v16,v17,v14]|28265: constant[\"componentDidUpdate.\",v15]|28266: +[v14,v15,v13]}" ] 
BB8548 -> BB8550 [tailport=s, headport=n, headlabel="      8550"]
BB8548 -> BB8558 [tailport=s, headport=n, color=gray]
BB8549 [shape=record label="{28267: constant[null,-]}" ] 
BB8549 -> BB8551 [tailport=s, headport=n, headlabel="      8551"]
BB8550 [shape=record label="{28268: call-warning [v7,v8,v9,v13,-]}" ] 
BB8550 -> BB8551 [tailport=s, headport=n]
BB8550 -> BB8558 [tailport=s, headport=n, color=gray]
BB8551 [shape=record label="{28269: read-variable['batchingStrategy',v9,-]|28270: read-property[v9,'isBatchingUpdates',v8]|28271: \<variable-non-null-undef\>['batchingStrategy']|28272: ![v8,v7]|28273: if[v7](true-block:8552,false-block:8555)}" ] 
BB8551 -> BB8552 [tailport=s, headport=n, headlabel="      8552"]
BB8551 -> BB8555 [tailport=s, headport=n, headlabel="      8555"]
BB8551 -> BB8558 [tailport=s, headport=n, color=gray]
BB8552 [shape=record label="{28274: read-variable['batchingStrategy',v11,-]|28275: read-property[v11,'batchedUpdates',-]|28276: \<variable-non-null-undef\>['batchingStrategy']|28277: read-variable['enqueueUpdate',v12,-]|28278: read-variable['component',v13,-]}" ] 
BB8552 -> BB8553 [tailport=s, headport=n, headlabel="      8553"]
BB8552 -> BB8558 [tailport=s, headport=n, color=gray]
BB8553 [shape=record label="{28279: call-batchingStrategy.batchedUpdates [v11,'batchedUpdates',v12,v13,-]*}" ] 
BB8553 -> BB8554 [tailport=s, headport=n, headlabel="      8554"]
BB8553 -> BB8558 [tailport=s, headport=n, color=gray]
BB8554 [shape=record label="{28280: constant[undefined,v1]}" ] 
BB8554 -> BB8557 [tailport=s, headport=n, headlabel="      8557"]
BB8555 [shape=record label="{28281: read-variable['dirtyComponents',v11,-]|28282: read-property[v11,'push',-]|28283: \<variable-non-null-undef\>['dirtyComponents']|28284: read-variable['component',v12,-]}" ] 
BB8555 -> BB8556 [tailport=s, headport=n, headlabel="      8556"]
BB8555 -> BB8558 [tailport=s, headport=n, color=gray]
BB8556 [shape=record label="{28285: call-dirtyComponents.push [v11,'push',v12,-]*}" ] 
BB8556 -> BB8557 [tailport=s, headport=n]
BB8556 -> BB8558 [tailport=s, headport=n, color=gray]
BB8557 [shape=record label="{28286: return[v1]}" ] 
BB8558 [shape=record label="{28287: exceptional-return}" ] 
//#$~ 14987
}
