digraph {
rankdir="TD"
BB_entry730[shape=none,label=""];
BB_entry730 -> BB9835 [tailport=s, headport=n, headlabel="    9835"]
BB9835 [shape=record label="{32549: constant[undefined,v1]|32550: vardecl['result']|32551: vardecl['keyUnique']}" ] 
BB9835 -> BB9836 [tailport=s, headport=n, headlabel="      9836"]
BB9836 [shape=record label="{32552: read-variable['traverseContext',v2,-]|32553: write-variable[v2,'result']*|32554: read-variable['result',v6,-]|32555: read-property[v6,'hasOwnProperty',-]|32556: \<variable-non-null-undef\>['result']|32557: read-variable['name',v7,-]}" ] 
BB9836 -> BB9837 [tailport=s, headport=n, headlabel="      9837"]
BB9836 -> BB9848 [tailport=s, headport=n, color=gray, headlabel="      9848"]
BB9837 [shape=record label="{32558: call-result.hasOwnProperty [v6,'hasOwnProperty',v7,v4]}" ] 
BB9837 -> BB9838 [tailport=s, headport=n, headlabel="      9838"]
BB9837 -> BB9848 [tailport=s, headport=n, color=gray]
BB9838 [shape=record label="{32559: ![v4,v3]|32560: write-variable[v3,'keyUnique']*|32561: constant[\"production\",v9]|32562: constant[\"development\",v10]|32563: !==[v9,v10,v8]|32564: if[v8](true-block:9839,false-block:9843)}" ] 
BB9838 -> BB9839 [tailport=s, headport=n, headlabel="      9839"]
BB9838 -> BB9843 [tailport=s, headport=n, headlabel="      9843"]
BB9838 -> BB9848 [tailport=s, headport=n, color=gray]
BB9839 [shape=record label="{32565: constant[\"production\",v12]|32566: constant[\"development\",v13]|32567: !==[v12,v13,v11]|32568: if[v11](true-block:9840,false-block:9841)}" ] 
BB9839 -> BB9840 [tailport=s, headport=n, headlabel="      9840"]
BB9839 -> BB9841 [tailport=s, headport=n, headlabel="      9841"]
BB9839 -> BB9848 [tailport=s, headport=n, color=gray]
BB9840 [shape=record label="{32569: read-variable['warning',v15,v14]|32570: read-variable['keyUnique',v16,-]|32571: constant[\"flattenChildren(...): Encountered two children with the same key, \",v20]|32572: constant[\"`%s`. Child keys must be unique; when two children share a key, only \",v21]|32573: +[v20,v21,v18]|32574: constant[\"the first child will be used.\",v19]|32575: +[v18,v19,v17]|32576: read-variable['name',v22,-]}" ] 
BB9840 -> BB9842 [tailport=s, headport=n, headlabel="      9842"]
BB9840 -> BB9848 [tailport=s, headport=n, color=gray]
BB9841 [shape=record label="{32577: constant[null,-]}" ] 
BB9841 -> BB9843 [tailport=s, headport=n]
BB9842 [shape=record label="{32578: call-warning [v14,v15,v16,v17,v22,-]}" ] 
BB9842 -> BB9843 [tailport=s, headport=n]
BB9842 -> BB9848 [tailport=s, headport=n, color=gray]
BB9843 [shape=record label="{32579: read-variable['keyUnique',v11,-]|32580: if[v11](true-block:9844,false-block:9845)}" ] 
BB9843 -> BB9845 [tailport=s, headport=n, headlabel="      9845"]
BB9843 -> BB9844 [tailport=s, headport=n, headlabel="      9844"]
BB9843 -> BB9848 [tailport=s, headport=n, color=gray]
BB9844 [shape=record label="{32581: read-variable['child',v12,-]|32582: constant[null,v13]|32583: !=[v12,v13,v11]}" ] 
BB9844 -> BB9845 [tailport=s, headport=n]
BB9844 -> BB9848 [tailport=s, headport=n, color=gray]
BB9845 [shape=record label="{32584: if[v11](true-block:9846,false-block:9847)}" ] 
BB9845 -> BB9846 [tailport=s, headport=n, headlabel="      9846"]
BB9845 -> BB9847 [tailport=s, headport=n, headlabel="      9847"]
BB9846 [shape=record label="{32585: read-variable['result',v13,-]|32586: read-variable['name',v14,-]|32587: read-variable['child',v12,-]|32588: write-property[v13,v14,v12]|32589: \<variable-non-null-undef\>['result']*}" ] 
BB9846 -> BB9847 [tailport=s, headport=n]
BB9846 -> BB9848 [tailport=s, headport=n, color=gray]
BB9847 [shape=record label="{32590: return[v1]}" ] 
BB9848 [shape=record label="{32591: exceptional-return}" ] 
//#$~ 17490
}
