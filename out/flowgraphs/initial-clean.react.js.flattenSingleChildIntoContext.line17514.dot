digraph {
rankdir="TD"
BB_entry731[shape=none,label=""];
BB_entry731 -> BB9862 [tailport=s, headport=n, headlabel="    9862"]
BB9862 [shape=record label="{32629: constant[undefined,v1]|32630: vardecl['result']|32631: vardecl['keyUnique']}" ] 
BB9862 -> BB9863 [tailport=s, headport=n, headlabel="      9863"]
BB9863 [shape=record label="{32632: read-variable['traverseContext',v2,-]|32633: write-variable[v2,'result']*|32634: read-variable['result',v6,-]|32635: read-property[v6,'hasOwnProperty',-]|32636: \<variable-non-null-undef\>['result']|32637: read-variable['name',v7,-]}" ] 
BB9863 -> BB9864 [tailport=s, headport=n, headlabel="      9864"]
BB9863 -> BB9875 [tailport=s, headport=n, color=gray, headlabel="      9875"]
BB9864 [shape=record label="{32638: call-result.hasOwnProperty [v6,'hasOwnProperty',v7,v4]}" ] 
BB9864 -> BB9865 [tailport=s, headport=n, headlabel="      9865"]
BB9864 -> BB9875 [tailport=s, headport=n, color=gray]
BB9865 [shape=record label="{32639: ![v4,v3]|32640: write-variable[v3,'keyUnique']*|32641: constant[\"production\",v9]|32642: constant[\"development\",v10]|32643: !==[v9,v10,v8]|32644: if[v8](true-block:9866,false-block:9870)}" ] 
BB9865 -> BB9866 [tailport=s, headport=n, headlabel="      9866"]
BB9865 -> BB9870 [tailport=s, headport=n, headlabel="      9870"]
BB9865 -> BB9875 [tailport=s, headport=n, color=gray]
BB9866 [shape=record label="{32645: constant[\"production\",v12]|32646: constant[\"development\",v13]|32647: !==[v12,v13,v11]|32648: if[v11](true-block:9867,false-block:9868)}" ] 
BB9866 -> BB9867 [tailport=s, headport=n, headlabel="      9867"]
BB9866 -> BB9868 [tailport=s, headport=n, headlabel="      9868"]
BB9866 -> BB9875 [tailport=s, headport=n, color=gray]
BB9867 [shape=record label="{32649: read-variable['warning',v15,v14]|32650: read-variable['keyUnique',v16,-]|32651: constant[\"flattenChildren(...): Encountered two children with the same key, \",v20]|32652: constant[\"`%s`. Child keys must be unique; when two children share a key, only \",v21]|32653: +[v20,v21,v18]|32654: constant[\"the first child will be used.\",v19]|32655: +[v18,v19,v17]|32656: read-variable['name',v22,-]}" ] 
BB9867 -> BB9869 [tailport=s, headport=n, headlabel="      9869"]
BB9867 -> BB9875 [tailport=s, headport=n, color=gray]
BB9868 [shape=record label="{32657: constant[null,-]}" ] 
BB9868 -> BB9870 [tailport=s, headport=n]
BB9869 [shape=record label="{32658: call-warning [v14,v15,v16,v17,v22,-]}" ] 
BB9869 -> BB9870 [tailport=s, headport=n]
BB9869 -> BB9875 [tailport=s, headport=n, color=gray]
BB9870 [shape=record label="{32659: read-variable['keyUnique',v11,-]|32660: if[v11](true-block:9871,false-block:9872)}" ] 
BB9870 -> BB9872 [tailport=s, headport=n, headlabel="      9872"]
BB9870 -> BB9871 [tailport=s, headport=n, headlabel="      9871"]
BB9870 -> BB9875 [tailport=s, headport=n, color=gray]
BB9871 [shape=record label="{32661: read-variable['child',v12,-]|32662: constant[null,v13]|32663: !=[v12,v13,v11]}" ] 
BB9871 -> BB9872 [tailport=s, headport=n]
BB9871 -> BB9875 [tailport=s, headport=n, color=gray]
BB9872 [shape=record label="{32664: if[v11](true-block:9873,false-block:9874)}" ] 
BB9872 -> BB9873 [tailport=s, headport=n, headlabel="      9873"]
BB9872 -> BB9874 [tailport=s, headport=n, headlabel="      9874"]
BB9873 [shape=record label="{32665: read-variable['result',v13,-]|32666: read-variable['name',v14,-]|32667: read-variable['child',v12,-]|32668: write-property[v13,v14,v12]|32669: \<variable-non-null-undef\>['result']*}" ] 
BB9873 -> BB9874 [tailport=s, headport=n]
BB9873 -> BB9875 [tailport=s, headport=n, color=gray]
BB9874 [shape=record label="{32670: return[v1]}" ] 
BB9875 [shape=record label="{32671: exceptional-return}" ] 
//#$~ 17528
}
