digraph {
rankdir="TD"
BB_entry116[shape=none,label=""];
BB_entry116 -> BB1326 [tailport=s, headport=n, headlabel="    1326"]
BB1326 [shape=record label="{4403: constant[undefined,v1]|4404: vardecl['bound']|4405: vardecl['event']|4406: vardecl['events']|4407: vardecl['handler']|4408: vardecl['list']|4409: vardecl['selector']}" ] 
BB1326 -> BB1327 [tailport=s, headport=n, headlabel="      1327"]
BB1327 [shape=record label="{4410: read-variable['Backbone',v3,-]|4411: read-property[v3,'utils',v2]|4412: \<variable-non-null-undef\>['Backbone']|4413: if[v2](true-block:1328,false-block:1330)}" ] 
BB1327 -> BB1328 [tailport=s, headport=n, headlabel="      1328"]
BB1327 -> BB1330 [tailport=s, headport=n, headlabel="      1330"]
BB1327 -> BB1361 [tailport=s, headport=n, color=gray, headlabel="      1361"]
BB1328 [shape=record label="{4414: read-variable['Backbone',v6,-]|4415: read-property[v6,'utils',v5]|4416: \<variable-non-null-undef\>['Backbone']|4417: read-property[v5,'delegate',-]|4418: \<property-non-null-undef\>[v6,'utils']|4419: read-variable['this',v7,-]|4420: read-variable['eventName',v8,-]|4421: read-variable['second',v9,-]|4422: read-variable['third',v10,-]}" ] 
BB1328 -> BB1329 [tailport=s, headport=n, headlabel="      1329"]
BB1328 -> BB1361 [tailport=s, headport=n, color=gray]
BB1329 [shape=record label="{4423: call-Backbone.utils.delegate [v5,'delegate',v7,v8,v9,v10,v1]}" ] 
BB1329 -> BB1360 [tailport=s, headport=n, headlabel="      1360"]
BB1329 -> BB1361 [tailport=s, headport=n, color=gray]
BB1330 [shape=record label="{4424: typeof['eventName',v5]|4425: constant[\"string\",v6]|4426: !==[v5,v6,v4]|4427: if[v4](true-block:1331,false-block:1334)}" ] 
BB1330 -> BB1331 [tailport=s, headport=n, headlabel="      1331"]
BB1330 -> BB1334 [tailport=s, headport=n, headlabel="      1334"]
BB1330 -> BB1361 [tailport=s, headport=n, color=gray]
BB1331 [shape=record label="{4428: read-variable['TypeError',v8,-]|4429: constant[\"View#delegate: first argument must be a string\",v9]}" ] 
BB1331 -> BB1332 [tailport=s, headport=n, headlabel="      1332"]
BB1331 -> BB1361 [tailport=s, headport=n, color=gray]
BB1332 [shape=record label="{4430: construct [-,v8,v9,v7]}" ] 
BB1332 -> BB1333 [tailport=s, headport=n, headlabel="      1333"]
BB1332 -> BB1361 [tailport=s, headport=n, color=gray]
BB1333 [shape=record label="{4431: throw[v7]*}" ] 
BB1333 -> BB1334 [tailport=s, headport=n]
BB1333 -> BB1361 [tailport=s, headport=n, color=gray]
BB1334 [shape=record label="{4432: read-variable['arguments',v10,-]|4433: read-property[v10,'length',v8]|4434: \<variable-non-null-undef\>['arguments']|4435: constant[2.0,v9]|4436: ===[v8,v9,v7]|4437: if[v7](true-block:1335,false-block:1336)}" ] 
BB1334 -> BB1335 [tailport=s, headport=n, headlabel="      1335"]
BB1334 -> BB1336 [tailport=s, headport=n, headlabel="      1336"]
BB1334 -> BB1361 [tailport=s, headport=n, color=gray]
BB1335 [shape=record label="{4438: read-variable['second',v11,-]|4439: write-variable[v11,'handler']*}" ] 
BB1335 -> BB1345 [tailport=s, headport=n, headlabel="      1345"]
BB1335 -> BB1361 [tailport=s, headport=n, color=gray]
BB1336 [shape=record label="{4440: read-variable['arguments',v14,-]|4441: read-property[v14,'length',v12]|4442: \<variable-non-null-undef\>['arguments']|4443: constant[3.0,v13]|4444: ===[v12,v13,v11]|4445: if[v11](true-block:1337,false-block:1338)}" ] 
BB1336 -> BB1337 [tailport=s, headport=n, headlabel="      1337"]
BB1336 -> BB1338 [tailport=s, headport=n, headlabel="      1338"]
BB1336 -> BB1361 [tailport=s, headport=n, color=gray]
BB1337 [shape=record label="{4446: read-variable['second',v15,-]|4447: write-variable[v15,'selector']*|4448: typeof['selector',v17]|4449: constant[\"string\",v18]|4450: !==[v17,v18,v16]|4451: if[v16](true-block:1339,false-block:1342)}" ] 
BB1337 -> BB1339 [tailport=s, headport=n, headlabel="      1339"]
BB1337 -> BB1342 [tailport=s, headport=n, headlabel="      1342"]
BB1337 -> BB1361 [tailport=s, headport=n, color=gray]
BB1338 [shape=record label="{4452: read-variable['TypeError',v16,-]|4453: constant[\"View#delegate: \",v18]|4454: constant[\"only two or three arguments are allowed\",v19]|4455: +[v18,v19,v17]}" ] 
BB1338 -> BB1343 [tailport=s, headport=n, headlabel="      1343"]
BB1338 -> BB1361 [tailport=s, headport=n, color=gray]
BB1339 [shape=record label="{4456: read-variable['TypeError',v20,-]|4457: constant[\"View#delegate: \",v22]|4458: constant[\"second argument must be a string\",v23]|4459: +[v22,v23,v21]}" ] 
BB1339 -> BB1340 [tailport=s, headport=n, headlabel="      1340"]
BB1339 -> BB1361 [tailport=s, headport=n, color=gray]
BB1340 [shape=record label="{4460: construct [-,v20,v21,v19]}" ] 
BB1340 -> BB1341 [tailport=s, headport=n, headlabel="      1341"]
BB1340 -> BB1361 [tailport=s, headport=n, color=gray]
BB1341 [shape=record label="{4461: throw[v19]*}" ] 
BB1341 -> BB1342 [tailport=s, headport=n]
BB1341 -> BB1361 [tailport=s, headport=n, color=gray]
BB1342 [shape=record label="{4462: read-variable['third',v19,-]|4463: write-variable[v19,'handler']*}" ] 
BB1342 -> BB1345 [tailport=s, headport=n]
BB1342 -> BB1361 [tailport=s, headport=n, color=gray]
BB1343 [shape=record label="{4464: construct [-,v16,v17,v15]}" ] 
BB1343 -> BB1344 [tailport=s, headport=n, headlabel="      1344"]
BB1343 -> BB1361 [tailport=s, headport=n, color=gray]
BB1344 [shape=record label="{4465: throw[v15]*}" ] 
BB1344 -> BB1345 [tailport=s, headport=n]
BB1344 -> BB1361 [tailport=s, headport=n, color=gray]
BB1345 [shape=record label="{4466: typeof['handler',v12]|4467: constant[\"function\",v13]|4468: !==[v12,v13,v11]|4469: if[v11](true-block:1346,false-block:1349)}" ] 
BB1345 -> BB1346 [tailport=s, headport=n, headlabel="      1346"]
BB1345 -> BB1349 [tailport=s, headport=n, headlabel="      1349"]
BB1345 -> BB1361 [tailport=s, headport=n, color=gray]
BB1346 [shape=record label="{4470: read-variable['TypeError',v15,-]|4471: constant[\"View#delegate: \",v17]|4472: constant[\"handler argument must be function\",v18]|4473: +[v17,v18,v16]}" ] 
BB1346 -> BB1347 [tailport=s, headport=n, headlabel="      1347"]
BB1346 -> BB1361 [tailport=s, headport=n, color=gray]
BB1347 [shape=record label="{4474: construct [-,v15,v16,v14]}" ] 
BB1347 -> BB1348 [tailport=s, headport=n, headlabel="      1348"]
BB1347 -> BB1361 [tailport=s, headport=n, color=gray]
BB1348 [shape=record label="{4475: throw[v14]*}" ] 
BB1348 -> BB1349 [tailport=s, headport=n]
BB1348 -> BB1361 [tailport=s, headport=n, color=gray]
BB1349 [shape=record label="{4476: function-expr[function ( ),v16]|4477: read-property[v16,'call',-]|4478: read-variable['this',v17,-]}" ] 
BB1349 -> BB1350 [tailport=s, headport=n, headlabel="      1350"]
BB1349 -> BB1361 [tailport=s, headport=n, color=gray]
BB1350 [shape=record label="{4479: call-null [v16,'call',v17,v14]}" ] 
BB1350 -> BB1351 [tailport=s, headport=n, headlabel="      1351"]
BB1350 -> BB1361 [tailport=s, headport=n, color=gray]
BB1351 [shape=record label="{4480: write-variable[v14,'list']*|4481: read-variable['list',v20,-]|4482: read-property[v20,'join',-]|4483: \<variable-non-null-undef\>['list']|4484: constant[\" \",v21]}" ] 
BB1351 -> BB1352 [tailport=s, headport=n, headlabel="      1352"]
BB1351 -> BB1361 [tailport=s, headport=n, color=gray]
BB1352 [shape=record label="{4485: call-list.join [v20,'join',v21,v18]}" ] 
BB1352 -> BB1353 [tailport=s, headport=n, headlabel="      1353"]
BB1352 -> BB1361 [tailport=s, headport=n, color=gray]
BB1353 [shape=record label="{4486: write-variable[v18,'events']*|4487: read-variable['bind',v24,v23]|4488: read-variable['handler',v25,-]|4489: read-variable['this',v26,-]}" ] 
BB1353 -> BB1354 [tailport=s, headport=n, headlabel="      1354"]
BB1353 -> BB1361 [tailport=s, headport=n, color=gray]
BB1354 [shape=record label="{4490: call-bind [v23,v24,v25,v26,v22]}" ] 
BB1354 -> BB1355 [tailport=s, headport=n, headlabel="      1355"]
BB1354 -> BB1361 [tailport=s, headport=n, color=gray]
BB1355 [shape=record label="{4491: write-variable[v22,'bound']*|4492: read-variable['this',v29,-]|4493: read-property[v29,'$el',v28]|4494: read-property[v28,'on',-]|4495: \<property-non-null-undef\>[v29,'$el']|4496: read-variable['events',v30,-]|4497: read-variable['selector',v31,-]|4498: if[v31](true-block:1357,false-block:1356)}" ] 
BB1355 -> BB1357 [tailport=s, headport=n, headlabel="      1357"]
BB1355 -> BB1356 [tailport=s, headport=n, headlabel="      1356"]
BB1355 -> BB1361 [tailport=s, headport=n, color=gray]
BB1356 [shape=record label="{4499: constant[null,v31]}" ] 
BB1356 -> BB1357 [tailport=s, headport=n]
BB1357 [shape=record label="{4500: read-variable['bound',v32,-]}" ] 
BB1357 -> BB1358 [tailport=s, headport=n, headlabel="      1358"]
BB1357 -> BB1361 [tailport=s, headport=n, color=gray]
BB1358 [shape=record label="{4501: call-this.$el.on [v28,'on',v30,v31,v32,-]*}" ] 
BB1358 -> BB1359 [tailport=s, headport=n, headlabel="      1359"]
BB1358 -> BB1361 [tailport=s, headport=n, color=gray]
BB1359 [shape=record label="{4502: read-variable['bound',v1,-]}" ] 
BB1359 -> BB1360 [tailport=s, headport=n]
BB1359 -> BB1361 [tailport=s, headport=n, color=gray]
BB1360 [shape=record label="{4503: return[v1]}" ] 
BB1361 [shape=record label="{4504: exceptional-return}" ] 
//#$~ 1241
}
