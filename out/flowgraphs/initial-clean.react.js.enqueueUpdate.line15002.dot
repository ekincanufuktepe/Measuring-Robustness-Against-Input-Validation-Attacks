digraph {
rankdir="TD"
BB_entry633[shape=none,label=""];
BB_entry633 -> BB8571 [tailport=s, headport=n, headlabel="    8571"]
BB8571 [shape=record label="{28323: constant[undefined,v1]}" ] 
BB8571 -> BB8572 [tailport=s, headport=n, headlabel="      8572"]
BB8572 [shape=record label="{28324: read-variable['ensureInjected',v3,v2]}" ] 
BB8572 -> BB8573 [tailport=s, headport=n, headlabel="      8573"]
BB8572 -> BB8585 [tailport=s, headport=n, color=gray, headlabel="      8585"]
BB8573 [shape=record label="{28325: call-ensureInjected [v2,v3,-]*}" ] 
BB8573 -> BB8574 [tailport=s, headport=n, headlabel="      8574"]
BB8573 -> BB8585 [tailport=s, headport=n, color=gray]
BB8574 [shape=record label="{28326: constant[\"production\",v5]|28327: constant[\"development\",v6]|28328: !==[v5,v6,v4]|28329: if[v4](true-block:8575,false-block:8576)}" ] 
BB8574 -> BB8575 [tailport=s, headport=n, headlabel="      8575"]
BB8574 -> BB8576 [tailport=s, headport=n, headlabel="      8576"]
BB8574 -> BB8585 [tailport=s, headport=n, color=gray]
BB8575 [shape=record label="{28330: read-variable['warning',v8,v7]|28331: read-variable['ReactCurrentOwner',v12,-]|28332: read-property[v12,'current',v10]|28333: \<variable-non-null-undef\>['ReactCurrentOwner']|28334: constant[null,v11]|28335: ==[v10,v11,v9]|28336: constant[\"enqueueUpdate(): Render methods should be a pure function of props \",v18]|28337: constant[\"and state; triggering nested component updates from render is not \",v19]|28338: +[v18,v19,v16]|28339: constant[\"allowed. If necessary, trigger nested updates in \",v17]|28340: +[v16,v17,v14]|28341: constant[\"componentDidUpdate.\",v15]|28342: +[v14,v15,v13]}" ] 
BB8575 -> BB8577 [tailport=s, headport=n, headlabel="      8577"]
BB8575 -> BB8585 [tailport=s, headport=n, color=gray]
BB8576 [shape=record label="{28343: constant[null,-]}" ] 
BB8576 -> BB8578 [tailport=s, headport=n, headlabel="      8578"]
BB8577 [shape=record label="{28344: call-warning [v7,v8,v9,v13,-]}" ] 
BB8577 -> BB8578 [tailport=s, headport=n]
BB8577 -> BB8585 [tailport=s, headport=n, color=gray]
BB8578 [shape=record label="{28345: read-variable['batchingStrategy',v9,-]|28346: read-property[v9,'isBatchingUpdates',v8]|28347: \<variable-non-null-undef\>['batchingStrategy']|28348: ![v8,v7]|28349: if[v7](true-block:8579,false-block:8582)}" ] 
BB8578 -> BB8579 [tailport=s, headport=n, headlabel="      8579"]
BB8578 -> BB8582 [tailport=s, headport=n, headlabel="      8582"]
BB8578 -> BB8585 [tailport=s, headport=n, color=gray]
BB8579 [shape=record label="{28350: read-variable['batchingStrategy',v11,-]|28351: read-property[v11,'batchedUpdates',-]|28352: \<variable-non-null-undef\>['batchingStrategy']|28353: read-variable['enqueueUpdate',v12,-]|28354: read-variable['component',v13,-]}" ] 
BB8579 -> BB8580 [tailport=s, headport=n, headlabel="      8580"]
BB8579 -> BB8585 [tailport=s, headport=n, color=gray]
BB8580 [shape=record label="{28355: call-batchingStrategy.batchedUpdates [v11,'batchedUpdates',v12,v13,-]*}" ] 
BB8580 -> BB8581 [tailport=s, headport=n, headlabel="      8581"]
BB8580 -> BB8585 [tailport=s, headport=n, color=gray]
BB8581 [shape=record label="{28356: constant[undefined,v1]}" ] 
BB8581 -> BB8584 [tailport=s, headport=n, headlabel="      8584"]
BB8582 [shape=record label="{28357: read-variable['dirtyComponents',v11,-]|28358: read-property[v11,'push',-]|28359: \<variable-non-null-undef\>['dirtyComponents']|28360: read-variable['component',v12,-]}" ] 
BB8582 -> BB8583 [tailport=s, headport=n, headlabel="      8583"]
BB8582 -> BB8585 [tailport=s, headport=n, color=gray]
BB8583 [shape=record label="{28361: call-dirtyComponents.push [v11,'push',v12,-]*}" ] 
BB8583 -> BB8584 [tailport=s, headport=n]
BB8583 -> BB8585 [tailport=s, headport=n, color=gray]
BB8584 [shape=record label="{28362: return[v1]}" ] 
BB8585 [shape=record label="{28363: exceptional-return}" ] 
//#$~ 15023
}
