digraph {
rankdir="TD"
BB_entry465[shape=none,label=""];
BB_entry465 -> BB8239 [tailport=s, headport=n, headlabel="    8239"]
BB8239 [shape=record label="{25088: constant[undefined,v1]|25089: vardecl['originalSource']|25090: vardecl['hasReturn']|25091: vardecl['ast']|25092: vardecl['ref']|25093: vardecl['fn']|25094: function-decl[function source ( node ),-]|25095: function-decl[function replace ( node str ),-]}" ] 
BB8239 -> BB8240 [tailport=s, headport=n, headlabel="      8240"]
BB8240 [shape=record label="{25096: read-variable['src',v2,-]|25097: write-variable[v2,'originalSource']*|25098: constant[false,v3]|25099: write-variable[v3,'hasReturn']*|25100: read-variable['acorn',v6,-]|25101: read-property[v6,'parse',-]|25102: \<variable-non-null-undef\>['acorn']|25103: read-variable['src',v7,-]|25104: new[v8]|25105: constant[6.0,v9]|25106: write-property[v8,'ecmaVersion',v9]}" ] 
BB8240 -> BB8241 [tailport=s, headport=n, headlabel="      8241"]
BB8240 -> BB8263 [tailport=s, headport=n, color=gray, headlabel="      8263"]
BB8241 [shape=record label="{25107: call-acorn.parse [v6,'parse',v7,v8,v4]}" ] 
BB8241 -> BB8242 [tailport=s, headport=n, headlabel="      8242"]
BB8241 -> BB8263 [tailport=s, headport=n, color=gray]
BB8242 [shape=record label="{25108: write-variable[v4,'ast']*|25109: read-variable['src',v12,-]|25110: read-property[v12,'split',-]|25111: \<variable-non-null-undef\>['src']|25112: constant[\"\",v13]}" ] 
BB8242 -> BB8243 [tailport=s, headport=n, headlabel="      8243"]
BB8242 -> BB8263 [tailport=s, headport=n, color=gray]
BB8243 [shape=record label="{25113: call-src.split [v12,'split',v13,v10]}" ] 
BB8243 -> BB8244 [tailport=s, headport=n, headlabel="      8244"]
BB8243 -> BB8263 [tailport=s, headport=n, color=gray]
BB8244 [shape=record label="{25114: write-variable[v10,'src']*|25115: read-variable['ast',v18,-]|25116: read-property[v18,'body',v17]|25117: \<variable-non-null-undef\>['ast']|25118: write-variable[v17,'ref']|25119: read-property[v17,'length',v15]|25120: \<property-non-null-undef\>[v18,'body']|25121: constant[1.0,v16]|25122: !==[v15,v16,v14]|25123: if[v14](true-block:8251,false-block:8245)}" ] 
BB8244 -> BB8251 [tailport=s, headport=n, headlabel="      8251"]
BB8244 -> BB8245 [tailport=s, headport=n, headlabel="      8245"]
BB8244 -> BB8263 [tailport=s, headport=n, color=gray]
BB8245 [shape=record label="{25124: read-variable['ref',v18,-]|25125: constant[0.0,v19]|25126: read-property[v18,v19,v17]|25127: \<variable-non-null-undef\>['ref']|25128: write-variable[v17,'ref']|25129: read-property[v17,'type',v15]|25130: \<property-non-null-undef\>[v18,v19]|25131: constant[\"ExpressionStatement\",v16]|25132: !==[v15,v16,v14]|25133: if[v14](true-block:8251,false-block:8246)}" ] 
BB8245 -> BB8251 [tailport=s, headport=n]
BB8245 -> BB8246 [tailport=s, headport=n, headlabel="      8246"]
BB8245 -> BB8263 [tailport=s, headport=n, color=gray]
BB8246 [shape=record label="{25134: read-variable['ref',v18,-]|25135: read-property[v18,'expression',v17]|25136: \<variable-non-null-undef\>['ref']|25137: write-variable[v17,'ref']|25138: read-property[v17,'type',v15]|25139: \<property-non-null-undef\>[v18,'expression']|25140: constant[\"CallExpression\",v16]|25141: !==[v15,v16,v14]|25142: if[v14](true-block:8251,false-block:8247)}" ] 
BB8246 -> BB8251 [tailport=s, headport=n]
BB8246 -> BB8247 [tailport=s, headport=n, headlabel="      8247"]
BB8246 -> BB8263 [tailport=s, headport=n, color=gray]
BB8247 [shape=record label="{25143: read-variable['ref',v18,-]|25144: read-property[v18,'callee',v17]|25145: \<variable-non-null-undef\>['ref']|25146: write-variable[v17,'ref']|25147: read-property[v17,'type',v15]|25148: \<property-non-null-undef\>[v18,'callee']|25149: constant[\"MemberExpression\",v16]|25150: !==[v15,v16,v14]|25151: if[v14](true-block:8251,false-block:8248)}" ] 
BB8247 -> BB8251 [tailport=s, headport=n]
BB8247 -> BB8248 [tailport=s, headport=n, headlabel="      8248"]
BB8247 -> BB8263 [tailport=s, headport=n, color=gray]
BB8248 [shape=record label="{25152: read-variable['ref',v17,-]|25153: read-property[v17,'computed',v15]|25154: \<variable-non-null-undef\>['ref']|25155: constant[false,v16]|25156: !==[v15,v16,v14]|25157: if[v14](true-block:8251,false-block:8249)}" ] 
BB8248 -> BB8251 [tailport=s, headport=n]
BB8248 -> BB8249 [tailport=s, headport=n, headlabel="      8249"]
BB8248 -> BB8263 [tailport=s, headport=n, color=gray]
BB8249 [shape=record label="{25158: read-variable['ref',v18,-]|25159: read-property[v18,'property',v17]|25160: \<variable-non-null-undef\>['ref']|25161: read-property[v17,'name',v15]|25162: \<property-non-null-undef\>[v18,'property']|25163: constant[\"call\",v16]|25164: !==[v15,v16,v14]|25165: if[v14](true-block:8251,false-block:8250)}" ] 
BB8249 -> BB8251 [tailport=s, headport=n]
BB8249 -> BB8250 [tailport=s, headport=n, headlabel="      8250"]
BB8249 -> BB8263 [tailport=s, headport=n, color=gray]
BB8250 [shape=record label="{25166: read-variable['ref',v18,-]|25167: read-property[v18,'object',v17]|25168: \<variable-non-null-undef\>['ref']|25169: write-variable[v17,'ref']|25170: read-property[v17,'type',v15]|25171: \<property-non-null-undef\>[v18,'object']|25172: constant[\"FunctionExpression\",v16]|25173: !==[v15,v16,v14]}" ] 
BB8250 -> BB8251 [tailport=s, headport=n]
BB8250 -> BB8263 [tailport=s, headport=n, color=gray]
BB8251 [shape=record label="{25174: if[v14](true-block:8252,false-block:8255)}" ] 
BB8251 -> BB8252 [tailport=s, headport=n, headlabel="      8252"]
BB8251 -> BB8255 [tailport=s, headport=n, headlabel="      8255"]
BB8252 [shape=record label="{25175: read-variable['Error',v16,-]|25176: constant[\"AST does not seem to represent a self-calling function\",v17]}" ] 
BB8252 -> BB8253 [tailport=s, headport=n, headlabel="      8253"]
BB8252 -> BB8263 [tailport=s, headport=n, color=gray]
BB8253 [shape=record label="{25177: construct [-,v16,v17,v15]}" ] 
BB8253 -> BB8254 [tailport=s, headport=n, headlabel="      8254"]
BB8253 -> BB8263 [tailport=s, headport=n, color=gray]
BB8254 [shape=record label="{25178: throw[v15]*}" ] 
BB8254 -> BB8255 [tailport=s, headport=n]
BB8254 -> BB8263 [tailport=s, headport=n, color=gray]
BB8255 [shape=record label="{25179: read-variable['ref',v15,-]|25180: write-variable[v15,'fn']*|25181: read-variable['walk',v17,-]|25182: read-property[v17,'recursive',-]|25183: \<variable-non-null-undef\>['walk']|25184: read-variable['ast',v18,-]|25185: constant[null,v19]|25186: new[v20]|25187: function-expr[function ( node st c ),v21]|25188: write-property[v20,'Function',v21]|25189: function-expr[function ( node ),v22]|25190: write-property[v20,'ReturnStatement',v22]}" ] 
BB8255 -> BB8256 [tailport=s, headport=n, headlabel="      8256"]
BB8255 -> BB8263 [tailport=s, headport=n, color=gray]
BB8256 [shape=record label="{25191: call-walk.recursive [v17,'recursive',v18,v19,v20,-]*}" ] 
BB8256 -> BB8257 [tailport=s, headport=n, headlabel="      8257"]
BB8256 -> BB8263 [tailport=s, headport=n, color=gray]
BB8257 [shape=record label="{25192: read-variable['hasReturn',v24,-]|25193: ![v24,v23]|25194: if[v23](true-block:8258,false-block:8259)}" ] 
BB8257 -> BB8258 [tailport=s, headport=n, headlabel="      8258"]
BB8257 -> BB8259 [tailport=s, headport=n, headlabel="      8259"]
BB8257 -> BB8263 [tailport=s, headport=n, color=gray]
BB8258 [shape=record label="{25195: read-variable['originalSource',v1,-]}" ] 
BB8258 -> BB8262 [tailport=s, headport=n, headlabel="      8262"]
BB8258 -> BB8263 [tailport=s, headport=n, color=gray]
BB8259 [shape=record label="{25196: constant[\"var \",v39]|25197: read-variable['result',v40,-]|25198: +[v39,v40,v37]|25199: constant[\"=\",v38]|25200: +[v37,v38,v35]|25201: read-variable['src',v42,-]|25202: read-property[v42,'join',-]|25203: \<variable-non-null-undef\>['src']|25204: constant[\"\",v43]}" ] 
BB8259 -> BB8260 [tailport=s, headport=n, headlabel="      8260"]
BB8259 -> BB8263 [tailport=s, headport=n, color=gray]
BB8260 [shape=record label="{25205: call-src.join [v42,'join',v43,v36]}" ] 
BB8260 -> BB8261 [tailport=s, headport=n, headlabel="      8261"]
BB8260 -> BB8263 [tailport=s, headport=n, color=gray]
BB8261 [shape=record label="{25206: +[v35,v36,v33]|25207: constant[\";if (\",v34]|25208: +[v33,v34,v31]|25209: read-variable['result',v32,-]|25210: +[v31,v32,v29]|25211: constant[\") return \",v30]|25212: +[v29,v30,v27]|25213: read-variable['result',v28,-]|25214: +[v27,v28,v25]|25215: constant[\".value\",v26]|25216: +[v25,v26,v1]}" ] 
BB8261 -> BB8262 [tailport=s, headport=n]
BB8261 -> BB8263 [tailport=s, headport=n, color=gray]
BB8262 [shape=record label="{25217: return[v1]}" ] 
BB8263 [shape=record label="{25218: exceptional-return}" ] 
//#$~ 7592
}
