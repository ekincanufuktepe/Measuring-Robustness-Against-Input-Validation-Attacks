digraph {
rankdir="TD"
BB_entry540[shape=none,label=""];
BB_entry540 -> BB8004 [tailport=s, headport=n, headlabel="    8004"]
BB8004 [shape=record label="{23999: constant[undefined,v1]|24000: vardecl['receivedPromise']|24001: vardecl['nativePromise']|24002: vardecl['deferred']}" ] 
BB8004 -> BB8005 [tailport=s, headport=n, headlabel="      8005"]
BB8005 [shape=record label="{24003: read-variable['valueOrPromise',v2,-]|24004: if[v2](true-block:8006,false-block:8007)}" ] 
BB8005 -> BB8007 [tailport=s, headport=n, headlabel="      8007"]
BB8005 -> BB8006 [tailport=s, headport=n, headlabel="      8006"]
BB8005 -> BB8033 [tailport=s, headport=n, color=gray, headlabel="      8033"]
BB8006 [shape=record label="{24005: read-variable['valueOrPromise',v6,-]|24006: read-property[v6,'then',v5]|24007: \<variable-non-null-undef\>['valueOrPromise']|24008: typeof[v5,v3]|24009: constant[\"function\",v4]|24010: ===[v3,v4,v2]}" ] 
BB8006 -> BB8007 [tailport=s, headport=n]
BB8006 -> BB8033 [tailport=s, headport=n, color=gray]
BB8007 [shape=record label="{24011: write-variable[v2,'receivedPromise']*|24012: read-variable['receivedPromise',v3,-]|24013: if[v3](true-block:8008,false-block:8009)}" ] 
BB8007 -> BB8009 [tailport=s, headport=n, headlabel="      8009"]
BB8007 -> BB8008 [tailport=s, headport=n, headlabel="      8008"]
BB8007 -> BB8033 [tailport=s, headport=n, color=gray]
BB8008 [shape=record label="{24014: read-variable['valueOrPromise',v4,-]|24015: read-variable['Promise',v5,-]|24016: instanceof[v4,v5,v3]}" ] 
BB8008 -> BB8009 [tailport=s, headport=n]
BB8008 -> BB8033 [tailport=s, headport=n, color=gray]
BB8009 [shape=record label="{24017: write-variable[v3,'nativePromise']*|24018: read-variable['receivedPromise',v5,-]|24019: ![v5,v4]|24020: if[v4](true-block:8010,false-block:8011)}" ] 
BB8009 -> BB8010 [tailport=s, headport=n, headlabel="      8010"]
BB8009 -> BB8011 [tailport=s, headport=n, headlabel="      8011"]
BB8009 -> BB8033 [tailport=s, headport=n, color=gray]
BB8010 [shape=record label="{24021: read-variable['arguments',v9,-]|24022: read-property[v9,'length',v7]|24023: \<variable-non-null-undef\>['arguments']|24024: constant[1.0,v8]|24025: \>[v7,v8,v6]|24026: if[v6](true-block:8012,false-block:8013)}" ] 
BB8010 -> BB8012 [tailport=s, headport=n, headlabel="      8012"]
BB8010 -> BB8013 [tailport=s, headport=n, headlabel="      8013"]
BB8010 -> BB8033 [tailport=s, headport=n, color=gray]
BB8011 [shape=record label="{24027: read-variable['nativePromise',v7,-]|24028: ![v7,v6]|24029: if[v6](true-block:8020,false-block:8025)}" ] 
BB8011 -> BB8020 [tailport=s, headport=n, headlabel="      8020"]
BB8011 -> BB8025 [tailport=s, headport=n, headlabel="      8025"]
BB8011 -> BB8033 [tailport=s, headport=n, color=gray]
BB8012 [shape=record label="{24030: read-variable['callback',v10,-]|24031: if[v10](true-block:8014,false-block:8015)}" ] 
BB8012 -> BB8014 [tailport=s, headport=n, headlabel="      8014"]
BB8012 -> BB8015 [tailport=s, headport=n, headlabel="      8015"]
BB8012 -> BB8033 [tailport=s, headport=n, color=gray]
BB8013 [shape=record label="{24032: read-variable['Deferred',v12,-]}" ] 
BB8013 -> BB8017 [tailport=s, headport=n, headlabel="      8017"]
BB8013 -> BB8033 [tailport=s, headport=n, color=gray]
BB8014 [shape=record label="{24033: read-variable['callback',v12,v11]|24034: read-variable['valueOrPromise',v13,-]}" ] 
BB8014 -> BB8016 [tailport=s, headport=n, headlabel="      8016"]
BB8014 -> BB8033 [tailport=s, headport=n, color=gray]
BB8015 [shape=record label="{24035: read-variable['valueOrPromise',v1,-]}" ] 
BB8015 -> BB8032 [tailport=s, headport=n, headlabel="      8032"]
BB8015 -> BB8033 [tailport=s, headport=n, color=gray]
BB8016 [shape=record label="{24036: call-callback [v11,v12,v13,v1]}" ] 
BB8016 -> BB8032 [tailport=s, headport=n]
BB8016 -> BB8033 [tailport=s, headport=n, color=gray]
BB8017 [shape=record label="{24037: construct [-,v12,v11]}" ] 
BB8017 -> BB8018 [tailport=s, headport=n, headlabel="      8018"]
BB8017 -> BB8033 [tailport=s, headport=n, color=gray]
BB8018 [shape=record label="{24038: read-property[v11,'resolve',-]|24039: read-variable['valueOrPromise',v13,-]}" ] 
BB8018 -> BB8019 [tailport=s, headport=n, headlabel="      8019"]
BB8018 -> BB8033 [tailport=s, headport=n, color=gray]
BB8019 [shape=record label="{24040: call-null [v11,'resolve',v13,v1]}" ] 
BB8019 -> BB8032 [tailport=s, headport=n]
BB8019 -> BB8033 [tailport=s, headport=n, color=gray]
BB8020 [shape=record label="{24041: read-variable['Deferred',v9,-]|24042: read-variable['valueOrPromise',v11,-]|24043: read-property[v11,'cancel',v10]|24044: \<variable-non-null-undef\>['valueOrPromise']}" ] 
BB8020 -> BB8021 [tailport=s, headport=n, headlabel="      8021"]
BB8020 -> BB8033 [tailport=s, headport=n, color=gray]
BB8021 [shape=record label="{24045: construct [-,v9,v10,v8]}" ] 
BB8021 -> BB8022 [tailport=s, headport=n, headlabel="      8022"]
BB8021 -> BB8033 [tailport=s, headport=n, color=gray]
BB8022 [shape=record label="{24046: write-variable[v8,'deferred']*|24047: read-variable['valueOrPromise',v13,-]|24048: read-property[v13,'then',-]|24049: \<variable-non-null-undef\>['valueOrPromise']|24050: read-variable['deferred',v15,-]|24051: read-property[v15,'resolve',v14]|24052: \<variable-non-null-undef\>['deferred']|24053: read-variable['deferred',v17,-]|24054: read-property[v17,'reject',v16]|24055: \<variable-non-null-undef\>['deferred']|24056: read-variable['deferred',v19,-]|24057: read-property[v19,'progress',v18]|24058: \<variable-non-null-undef\>['deferred']}" ] 
BB8022 -> BB8023 [tailport=s, headport=n, headlabel="      8023"]
BB8022 -> BB8033 [tailport=s, headport=n, color=gray]
BB8023 [shape=record label="{24059: call-valueOrPromise.then [v13,'then',v14,v16,v18,-]*}" ] 
BB8023 -> BB8024 [tailport=s, headport=n, headlabel="      8024"]
BB8023 -> BB8033 [tailport=s, headport=n, color=gray]
BB8024 [shape=record label="{24060: read-variable['deferred',v21,-]|24061: read-property[v21,'promise',v20]|24062: \<variable-non-null-undef\>['deferred']|24063: write-variable[v20,'valueOrPromise']*}" ] 
BB8024 -> BB8025 [tailport=s, headport=n]
BB8024 -> BB8033 [tailport=s, headport=n, color=gray]
BB8025 [shape=record label="{24064: read-variable['callback',v6,-]|24065: if[v6](true-block:8028,false-block:8026)}" ] 
BB8025 -> BB8028 [tailport=s, headport=n, headlabel="      8028"]
BB8025 -> BB8026 [tailport=s, headport=n, headlabel="      8026"]
BB8025 -> BB8033 [tailport=s, headport=n, color=gray]
BB8026 [shape=record label="{24066: read-variable['errback',v6,-]|24067: if[v6](true-block:8028,false-block:8027)}" ] 
BB8026 -> BB8028 [tailport=s, headport=n]
BB8026 -> BB8027 [tailport=s, headport=n, headlabel="      8027"]
BB8026 -> BB8033 [tailport=s, headport=n, color=gray]
BB8027 [shape=record label="{24068: read-variable['progback',v6,-]}" ] 
BB8027 -> BB8028 [tailport=s, headport=n]
BB8027 -> BB8033 [tailport=s, headport=n, color=gray]
BB8028 [shape=record label="{24069: if[v6](true-block:8029,false-block:8031)}" ] 
BB8028 -> BB8029 [tailport=s, headport=n, headlabel="      8029"]
BB8028 -> BB8031 [tailport=s, headport=n, headlabel="      8031"]
BB8029 [shape=record label="{24070: read-variable['valueOrPromise',v8,-]|24071: read-property[v8,'then',-]|24072: \<variable-non-null-undef\>['valueOrPromise']|24073: read-variable['callback',v9,-]|24074: read-variable['errback',v10,-]|24075: read-variable['progback',v11,-]}" ] 
BB8029 -> BB8030 [tailport=s, headport=n, headlabel="      8030"]
BB8029 -> BB8033 [tailport=s, headport=n, color=gray]
BB8030 [shape=record label="{24076: call-valueOrPromise.then [v8,'then',v9,v10,v11,v1]}" ] 
BB8030 -> BB8032 [tailport=s, headport=n]
BB8030 -> BB8033 [tailport=s, headport=n, color=gray]
BB8031 [shape=record label="{24077: read-variable['valueOrPromise',v1,-]}" ] 
BB8031 -> BB8032 [tailport=s, headport=n]
BB8031 -> BB8033 [tailport=s, headport=n, color=gray]
BB8032 [shape=record label="{24078: return[v1]}" ] 
BB8033 [shape=record label="{24079: exceptional-return}" ] 
//#$~ 11226
}
