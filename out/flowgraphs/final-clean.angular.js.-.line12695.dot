digraph {
rankdir="TD"
BB_entry603[shape=none,label=""];
BB_entry603 -> BB8149 [tailport=s, headport=n, headlabel="    8149"]
BB8149 [shape=record label="{21015: constant[undefined,v1]|21016: vardecl['test']|21017: vardecl['alternate']|21018: vardecl['consequent']}" ] 
BB8149 -> BB8150 [tailport=s, headport=n, headlabel="      8150"]
BB8150 [shape=record label="{21019: read-variable['this',v4,-]|21020: read-property[v4,'logicalOR',-]}" ] 
BB8150 -> BB8151 [tailport=s, headport=n, headlabel="      8151"]
BB8150 -> BB8165 [tailport=s, headport=n, color=gray, headlabel="      8165"]
BB8151 [shape=record label="{21021: call-this.logicalOR [v4,'logicalOR',v2]}" ] 
BB8151 -> BB8152 [tailport=s, headport=n, headlabel="      8152"]
BB8151 -> BB8165 [tailport=s, headport=n, color=gray]
BB8152 [shape=record label="{21022: write-variable[v2,'test']*|21023: read-variable['this',v7,-]|21024: read-property[v7,'expect',-]|21025: constant[\"?\",v8]}" ] 
BB8152 -> BB8153 [tailport=s, headport=n, headlabel="      8153"]
BB8152 -> BB8165 [tailport=s, headport=n, color=gray]
BB8153 [shape=record label="{21026: call-this.expect [v7,'expect',v8,v5]}" ] 
BB8153 -> BB8154 [tailport=s, headport=n, headlabel="      8154"]
BB8153 -> BB8165 [tailport=s, headport=n, color=gray]
BB8154 [shape=record label="{21027: if[v5](true-block:8155,false-block:8163)}" ] 
BB8154 -> BB8155 [tailport=s, headport=n, headlabel="      8155"]
BB8154 -> BB8163 [tailport=s, headport=n, headlabel="      8163"]
BB8155 [shape=record label="{21028: read-variable['this',v11,-]|21029: read-property[v11,'expression',-]}" ] 
BB8155 -> BB8156 [tailport=s, headport=n, headlabel="      8156"]
BB8155 -> BB8165 [tailport=s, headport=n, color=gray]
BB8156 [shape=record label="{21030: call-this.expression [v11,'expression',v9]}" ] 
BB8156 -> BB8157 [tailport=s, headport=n, headlabel="      8157"]
BB8156 -> BB8165 [tailport=s, headport=n, color=gray]
BB8157 [shape=record label="{21031: write-variable[v9,'alternate']*|21032: read-variable['this',v14,-]|21033: read-property[v14,'consume',-]|21034: constant[\":\",v15]}" ] 
BB8157 -> BB8158 [tailport=s, headport=n, headlabel="      8158"]
BB8157 -> BB8165 [tailport=s, headport=n, color=gray]
BB8158 [shape=record label="{21035: call-this.consume [v14,'consume',v15,v12]}" ] 
BB8158 -> BB8159 [tailport=s, headport=n, headlabel="      8159"]
BB8158 -> BB8165 [tailport=s, headport=n, color=gray]
BB8159 [shape=record label="{21036: if[v12](true-block:8160,false-block:8163)}" ] 
BB8159 -> BB8160 [tailport=s, headport=n, headlabel="      8160"]
BB8159 -> BB8163 [tailport=s, headport=n]
BB8160 [shape=record label="{21037: read-variable['this',v18,-]|21038: read-property[v18,'expression',-]}" ] 
BB8160 -> BB8161 [tailport=s, headport=n, headlabel="      8161"]
BB8160 -> BB8165 [tailport=s, headport=n, color=gray]
BB8161 [shape=record label="{21039: call-this.expression [v18,'expression',v16]}" ] 
BB8161 -> BB8162 [tailport=s, headport=n, headlabel="      8162"]
BB8161 -> BB8165 [tailport=s, headport=n, color=gray]
BB8162 [shape=record label="{21040: write-variable[v16,'consequent']*|21041: new[v1]|21042: read-variable['AST',v20,-]|21043: read-property[v20,'ConditionalExpression',v19]|21044: \<variable-non-null-undef\>['AST']|21045: write-property[v1,'type',v19]|21046: read-variable['test',v21,-]|21047: write-property[v1,'test',v21]|21048: read-variable['alternate',v22,-]|21049: write-property[v1,'alternate',v22]|21050: read-variable['consequent',v23,-]|21051: write-property[v1,'consequent',v23]}" ] 
BB8162 -> BB8164 [tailport=s, headport=n, headlabel="      8164"]
BB8162 -> BB8165 [tailport=s, headport=n, color=gray]
BB8163 [shape=record label="{21052: read-variable['test',v1,-]}" ] 
BB8163 -> BB8164 [tailport=s, headport=n]
BB8163 -> BB8165 [tailport=s, headport=n, color=gray]
BB8164 [shape=record label="{21053: return[v1]}" ] 
BB8165 [shape=record label="{21054: exceptional-return}" ] 
//#$~ 12706
}
