digraph {
rankdir="TD"
BB_entry128[shape=none,label=""];
BB_entry128 -> BB1892 [tailport=s, headport=n, headlabel="    1892"]
BB1892 [shape=record label="{9158: constant[undefined,v1]|9159: vardecl['self']|9160: vardecl['m']}" ] 
BB1892 -> BB1893 [tailport=s, headport=n, headlabel="      1893"]
BB1893 [shape=record label="{9161: read-variable['MochiKit',v3,-]|9162: read-property[v3,'Iter',v2]|9163: \<variable-non-null-undef\>['MochiKit']|9164: write-variable[v2,'self']*|9165: read-variable['arguments',v7,-]|9166: read-property[v7,'length',v5]|9167: \<variable-non-null-undef\>['arguments']|9168: constant[2.0,v6]|9169: ==[v5,v6,v4]|9170: if[v4](true-block:1894,false-block:1896)}" ] 
BB1893 -> BB1894 [tailport=s, headport=n, headlabel="      1894"]
BB1893 -> BB1896 [tailport=s, headport=n, headlabel="      1896"]
BB1893 -> BB1913 [tailport=s, headport=n, color=gray, headlabel="      1913"]
BB1894 [shape=record label="{9171: read-variable['self',v9,-]|9172: read-property[v9,'takewhile',-]|9173: \<variable-non-null-undef\>['self']|9174: function-expr[function ( a ),v10]|9175: read-variable['_160',v11,-]}" ] 
BB1894 -> BB1895 [tailport=s, headport=n, headlabel="      1895"]
BB1894 -> BB1913 [tailport=s, headport=n, color=gray]
BB1895 [shape=record label="{9176: call-self.takewhile [v9,'takewhile',v10,v11,v1]}" ] 
BB1895 -> BB1912 [tailport=s, headport=n, headlabel="      1912"]
BB1895 -> BB1913 [tailport=s, headport=n, color=gray]
BB1896 [shape=record label="{9177: read-variable['_160',v12,-]|9178: read-property[v12,'next',v11]|9179: \<variable-non-null-undef\>['_160']|9180: typeof[v11,v9]|9181: constant[\"function\",v10]|9182: ==[v9,v10,v8]|9183: if[v8](true-block:1897,false-block:1898)}" ] 
BB1896 -> BB1897 [tailport=s, headport=n, headlabel="      1897"]
BB1896 -> BB1898 [tailport=s, headport=n, headlabel="      1898"]
BB1896 -> BB1913 [tailport=s, headport=n, color=gray]
BB1897 [shape=record label="{9184: read-variable['_160',v1,-]}" ] 
BB1897 -> BB1912 [tailport=s, headport=n]
BB1897 -> BB1913 [tailport=s, headport=n, color=gray]
BB1898 [shape=record label="{9185: read-variable['_160',v17,-]|9186: read-property[v17,'iter',v16]|9187: \<variable-non-null-undef\>['_160']|9188: typeof[v16,v14]|9189: constant[\"function\",v15]|9190: ==[v14,v15,v13]|9191: if[v13](true-block:1899,false-block:1901)}" ] 
BB1898 -> BB1899 [tailport=s, headport=n, headlabel="      1899"]
BB1898 -> BB1901 [tailport=s, headport=n, headlabel="      1901"]
BB1898 -> BB1913 [tailport=s, headport=n, color=gray]
BB1899 [shape=record label="{9192: read-variable['_160',v19,-]|9193: read-property[v19,'iter',-]|9194: \<variable-non-null-undef\>['_160']}" ] 
BB1899 -> BB1900 [tailport=s, headport=n, headlabel="      1900"]
BB1899 -> BB1913 [tailport=s, headport=n, color=gray]
BB1900 [shape=record label="{9195: call-_160.iter [v19,'iter',v1]}" ] 
BB1900 -> BB1912 [tailport=s, headport=n]
BB1900 -> BB1913 [tailport=s, headport=n, color=gray]
BB1901 [shape=record label="{9196: read-variable['self',v15,-]|9197: read-property[v15,'iteratorRegistry',v14]|9198: \<variable-non-null-undef\>['self']|9199: read-property[v14,'match',-]|9200: \<property-non-null-undef\>[v15,'iteratorRegistry']|9201: read-variable['_160',v16,-]}" ] 
BB1901 -> BB1902 [tailport=s, headport=n, headlabel="      1902"]
BB1901 -> BB1903 [tailport=s, headport=n, color=gray, headlabel="      1903"]
BB1902 [shape=record label="{9202: call-self.iteratorRegistry.match [v14,'match',v16,v1]}" ] 
BB1902 -> BB1912 [tailport=s, headport=n]
BB1902 -> BB1903 [tailport=s, headport=n, color=gray]
BB1903 [shape=record label="{9203: catch[e,v13]|9204: begin-with[v13]}" ] 
BB1903 -> BB1904 [tailport=s, headport=n, headlabel="      1904"]
BB1903 -> BB1913 [tailport=s, headport=n, color=gray]
BB1904 [shape=record label="{9205: read-variable['MochiKit',v16,v14]|9206: read-property[v16,'Base',v15]|9207: \<variable-non-null-undef\>['MochiKit']|9208: write-variable[v15,'m']*|9209: read-variable['e',v18,v14]|9210: read-variable['m',v20,v14]|9211: read-property[v20,'NotFound',v19]|9212: \<variable-non-null-undef\>['m']|9213: ==[v18,v19,v17]|9214: if[v17](true-block:1906,false-block:1911)}" ] 
BB1904 -> BB1906 [tailport=s, headport=n, headlabel="      1906"]
BB1904 -> BB1911 [tailport=s, headport=n, headlabel="      1911"]
BB1904 -> BB1905 [tailport=s, headport=n, color=gray, headlabel="      1905"]
BB1905 [shape=record label="{9215: end-with}" ] 
BB1905 -> BB1913 [tailport=s, headport=n]
BB1906 [shape=record label="{9216: read-variable['TypeError',v22,-]|9217: typeof['_160',v28]|9218: constant[\": \",v29]|9219: +[v28,v29,v26]|9220: read-variable['m',v31,-]|9221: read-property[v31,'repr',-]|9222: \<variable-non-null-undef\>['m']|9223: read-variable['_160',v32,v14]}" ] 
BB1906 -> BB1907 [tailport=s, headport=n, headlabel="      1907"]
BB1906 -> BB1905 [tailport=s, headport=n, color=gray]
BB1907 [shape=record label="{9224: call-m.repr [v31,'repr',v32,v27]}" ] 
BB1907 -> BB1908 [tailport=s, headport=n, headlabel="      1908"]
BB1907 -> BB1905 [tailport=s, headport=n, color=gray]
BB1908 [shape=record label="{9225: +[v26,v27,v24]|9226: constant[\" is not iterable\",v25]|9227: +[v24,v25,v23]}" ] 
BB1908 -> BB1909 [tailport=s, headport=n, headlabel="      1909"]
BB1908 -> BB1905 [tailport=s, headport=n, color=gray]
BB1909 [shape=record label="{9228: construct [-,v22,v23,v21]}" ] 
BB1909 -> BB1910 [tailport=s, headport=n, headlabel="      1910"]
BB1909 -> BB1905 [tailport=s, headport=n, color=gray]
BB1910 [shape=record label="{9229: write-variable[v21,'e']*}" ] 
BB1910 -> BB1911 [tailport=s, headport=n]
BB1911 [shape=record label="{9230: read-variable['e',v21,v14]|9231: throw[v21]*|9232: end-with}" ] 
BB1911 -> BB1912 [tailport=s, headport=n]
BB1911 -> BB1905 [tailport=s, headport=n, color=gray]
BB1912 [shape=record label="{9233: return[v1]}" ] 
BB1913 [shape=record label="{9234: exceptional-return}" ] 
//#$~ 1127
}
