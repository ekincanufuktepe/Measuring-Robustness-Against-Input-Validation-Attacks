digraph {
rankdir="TD"
BB_entry116[shape=none,label=""];
BB_entry116 -> BB1324 [tailport=s, headport=n, headlabel="    1324"]
BB1324 [shape=record label="{4400: constant[undefined,v1]|4401: vardecl['bound']|4402: vardecl['event']|4403: vardecl['events']|4404: vardecl['handler']|4405: vardecl['list']|4406: vardecl['selector']}" ] 
BB1324 -> BB1325 [tailport=s, headport=n, headlabel="      1325"]
BB1325 [shape=record label="{4407: read-variable['Backbone',v3,-]|4408: read-property[v3,'utils',v2]|4409: \<variable-non-null-undef\>['Backbone']|4410: if[v2](true-block:1326,false-block:1328)}" ] 
BB1325 -> BB1326 [tailport=s, headport=n, headlabel="      1326"]
BB1325 -> BB1328 [tailport=s, headport=n, headlabel="      1328"]
BB1325 -> BB1359 [tailport=s, headport=n, color=gray, headlabel="      1359"]
BB1326 [shape=record label="{4411: read-variable['Backbone',v6,-]|4412: read-property[v6,'utils',v5]|4413: \<variable-non-null-undef\>['Backbone']|4414: read-property[v5,'delegate',-]|4415: \<property-non-null-undef\>[v6,'utils']|4416: read-variable['this',v7,-]|4417: read-variable['eventName',v8,-]|4418: read-variable['second',v9,-]|4419: read-variable['third',v10,-]}" ] 
BB1326 -> BB1327 [tailport=s, headport=n, headlabel="      1327"]
BB1326 -> BB1359 [tailport=s, headport=n, color=gray]
BB1327 [shape=record label="{4420: call-Backbone.utils.delegate [v5,'delegate',v7,v8,v9,v10,v1]}" ] 
BB1327 -> BB1358 [tailport=s, headport=n, headlabel="      1358"]
BB1327 -> BB1359 [tailport=s, headport=n, color=gray]
BB1328 [shape=record label="{4421: typeof['eventName',v5]|4422: constant[\"string\",v6]|4423: !==[v5,v6,v4]|4424: if[v4](true-block:1329,false-block:1332)}" ] 
BB1328 -> BB1329 [tailport=s, headport=n, headlabel="      1329"]
BB1328 -> BB1332 [tailport=s, headport=n, headlabel="      1332"]
BB1328 -> BB1359 [tailport=s, headport=n, color=gray]
BB1329 [shape=record label="{4425: read-variable['TypeError',v8,-]|4426: constant[\"View#delegate: first argument must be a string\",v9]}" ] 
BB1329 -> BB1330 [tailport=s, headport=n, headlabel="      1330"]
BB1329 -> BB1359 [tailport=s, headport=n, color=gray]
BB1330 [shape=record label="{4427: construct [-,v8,v9,v7]}" ] 
BB1330 -> BB1331 [tailport=s, headport=n, headlabel="      1331"]
BB1330 -> BB1359 [tailport=s, headport=n, color=gray]
BB1331 [shape=record label="{4428: throw[v7]*}" ] 
BB1331 -> BB1332 [tailport=s, headport=n]
BB1331 -> BB1359 [tailport=s, headport=n, color=gray]
BB1332 [shape=record label="{4429: read-variable['arguments',v10,-]|4430: read-property[v10,'length',v8]|4431: \<variable-non-null-undef\>['arguments']|4432: constant[2.0,v9]|4433: ===[v8,v9,v7]|4434: if[v7](true-block:1333,false-block:1334)}" ] 
BB1332 -> BB1333 [tailport=s, headport=n, headlabel="      1333"]
BB1332 -> BB1334 [tailport=s, headport=n, headlabel="      1334"]
BB1332 -> BB1359 [tailport=s, headport=n, color=gray]
BB1333 [shape=record label="{4435: read-variable['second',v11,-]|4436: write-variable[v11,'handler']*}" ] 
BB1333 -> BB1343 [tailport=s, headport=n, headlabel="      1343"]
BB1333 -> BB1359 [tailport=s, headport=n, color=gray]
BB1334 [shape=record label="{4437: read-variable['arguments',v14,-]|4438: read-property[v14,'length',v12]|4439: \<variable-non-null-undef\>['arguments']|4440: constant[3.0,v13]|4441: ===[v12,v13,v11]|4442: if[v11](true-block:1335,false-block:1336)}" ] 
BB1334 -> BB1335 [tailport=s, headport=n, headlabel="      1335"]
BB1334 -> BB1336 [tailport=s, headport=n, headlabel="      1336"]
BB1334 -> BB1359 [tailport=s, headport=n, color=gray]
BB1335 [shape=record label="{4443: read-variable['second',v15,-]|4444: write-variable[v15,'selector']*|4445: typeof['selector',v17]|4446: constant[\"string\",v18]|4447: !==[v17,v18,v16]|4448: if[v16](true-block:1337,false-block:1340)}" ] 
BB1335 -> BB1337 [tailport=s, headport=n, headlabel="      1337"]
BB1335 -> BB1340 [tailport=s, headport=n, headlabel="      1340"]
BB1335 -> BB1359 [tailport=s, headport=n, color=gray]
BB1336 [shape=record label="{4449: read-variable['TypeError',v16,-]|4450: constant[\"View#delegate: \",v18]|4451: constant[\"only two or three arguments are allowed\",v19]|4452: +[v18,v19,v17]}" ] 
BB1336 -> BB1341 [tailport=s, headport=n, headlabel="      1341"]
BB1336 -> BB1359 [tailport=s, headport=n, color=gray]
BB1337 [shape=record label="{4453: read-variable['TypeError',v20,-]|4454: constant[\"View#delegate: \",v22]|4455: constant[\"second argument must be a string\",v23]|4456: +[v22,v23,v21]}" ] 
BB1337 -> BB1338 [tailport=s, headport=n, headlabel="      1338"]
BB1337 -> BB1359 [tailport=s, headport=n, color=gray]
BB1338 [shape=record label="{4457: construct [-,v20,v21,v19]}" ] 
BB1338 -> BB1339 [tailport=s, headport=n, headlabel="      1339"]
BB1338 -> BB1359 [tailport=s, headport=n, color=gray]
BB1339 [shape=record label="{4458: throw[v19]*}" ] 
BB1339 -> BB1340 [tailport=s, headport=n]
BB1339 -> BB1359 [tailport=s, headport=n, color=gray]
BB1340 [shape=record label="{4459: read-variable['third',v19,-]|4460: write-variable[v19,'handler']*}" ] 
BB1340 -> BB1343 [tailport=s, headport=n]
BB1340 -> BB1359 [tailport=s, headport=n, color=gray]
BB1341 [shape=record label="{4461: construct [-,v16,v17,v15]}" ] 
BB1341 -> BB1342 [tailport=s, headport=n, headlabel="      1342"]
BB1341 -> BB1359 [tailport=s, headport=n, color=gray]
BB1342 [shape=record label="{4462: throw[v15]*}" ] 
BB1342 -> BB1343 [tailport=s, headport=n]
BB1342 -> BB1359 [tailport=s, headport=n, color=gray]
BB1343 [shape=record label="{4463: typeof['handler',v12]|4464: constant[\"function\",v13]|4465: !==[v12,v13,v11]|4466: if[v11](true-block:1344,false-block:1347)}" ] 
BB1343 -> BB1344 [tailport=s, headport=n, headlabel="      1344"]
BB1343 -> BB1347 [tailport=s, headport=n, headlabel="      1347"]
BB1343 -> BB1359 [tailport=s, headport=n, color=gray]
BB1344 [shape=record label="{4467: read-variable['TypeError',v15,-]|4468: constant[\"View#delegate: \",v17]|4469: constant[\"handler argument must be function\",v18]|4470: +[v17,v18,v16]}" ] 
BB1344 -> BB1345 [tailport=s, headport=n, headlabel="      1345"]
BB1344 -> BB1359 [tailport=s, headport=n, color=gray]
BB1345 [shape=record label="{4471: construct [-,v15,v16,v14]}" ] 
BB1345 -> BB1346 [tailport=s, headport=n, headlabel="      1346"]
BB1345 -> BB1359 [tailport=s, headport=n, color=gray]
BB1346 [shape=record label="{4472: throw[v14]*}" ] 
BB1346 -> BB1347 [tailport=s, headport=n]
BB1346 -> BB1359 [tailport=s, headport=n, color=gray]
BB1347 [shape=record label="{4473: function-expr[function ( ),v16]|4474: read-property[v16,'call',-]|4475: read-variable['this',v17,-]}" ] 
BB1347 -> BB1348 [tailport=s, headport=n, headlabel="      1348"]
BB1347 -> BB1359 [tailport=s, headport=n, color=gray]
BB1348 [shape=record label="{4476: call-null [v16,'call',v17,v14]}" ] 
BB1348 -> BB1349 [tailport=s, headport=n, headlabel="      1349"]
BB1348 -> BB1359 [tailport=s, headport=n, color=gray]
BB1349 [shape=record label="{4477: write-variable[v14,'list']*|4478: read-variable['list',v20,-]|4479: read-property[v20,'join',-]|4480: \<variable-non-null-undef\>['list']|4481: constant[\" \",v21]}" ] 
BB1349 -> BB1350 [tailport=s, headport=n, headlabel="      1350"]
BB1349 -> BB1359 [tailport=s, headport=n, color=gray]
BB1350 [shape=record label="{4482: call-list.join [v20,'join',v21,v18]}" ] 
BB1350 -> BB1351 [tailport=s, headport=n, headlabel="      1351"]
BB1350 -> BB1359 [tailport=s, headport=n, color=gray]
BB1351 [shape=record label="{4483: write-variable[v18,'events']*|4484: read-variable['bind',v24,v23]|4485: read-variable['handler',v25,-]|4486: read-variable['this',v26,-]}" ] 
BB1351 -> BB1352 [tailport=s, headport=n, headlabel="      1352"]
BB1351 -> BB1359 [tailport=s, headport=n, color=gray]
BB1352 [shape=record label="{4487: call-bind [v23,v24,v25,v26,v22]}" ] 
BB1352 -> BB1353 [tailport=s, headport=n, headlabel="      1353"]
BB1352 -> BB1359 [tailport=s, headport=n, color=gray]
BB1353 [shape=record label="{4488: write-variable[v22,'bound']*|4489: read-variable['this',v29,-]|4490: read-property[v29,'$el',v28]|4491: read-property[v28,'on',-]|4492: \<property-non-null-undef\>[v29,'$el']|4493: read-variable['events',v30,-]|4494: read-variable['selector',v31,-]|4495: if[v31](true-block:1355,false-block:1354)}" ] 
BB1353 -> BB1355 [tailport=s, headport=n, headlabel="      1355"]
BB1353 -> BB1354 [tailport=s, headport=n, headlabel="      1354"]
BB1353 -> BB1359 [tailport=s, headport=n, color=gray]
BB1354 [shape=record label="{4496: constant[null,v31]}" ] 
BB1354 -> BB1355 [tailport=s, headport=n]
BB1355 [shape=record label="{4497: read-variable['bound',v32,-]}" ] 
BB1355 -> BB1356 [tailport=s, headport=n, headlabel="      1356"]
BB1355 -> BB1359 [tailport=s, headport=n, color=gray]
BB1356 [shape=record label="{4498: call-this.$el.on [v28,'on',v30,v31,v32,-]*}" ] 
BB1356 -> BB1357 [tailport=s, headport=n, headlabel="      1357"]
BB1356 -> BB1359 [tailport=s, headport=n, color=gray]
BB1357 [shape=record label="{4499: read-variable['bound',v1,-]}" ] 
BB1357 -> BB1358 [tailport=s, headport=n]
BB1357 -> BB1359 [tailport=s, headport=n, color=gray]
BB1358 [shape=record label="{4500: return[v1]}" ] 
BB1359 [shape=record label="{4501: exceptional-return}" ] 
//#$~ 1239
}
