digraph {
rankdir="TD"
BB_entry18[shape=none,label=""];
BB_entry18 -> BB522 [tailport=s, headport=n, headlabel="    522"]
BB522 [shape=record label="{1768: constant[undefined,v1]|1769: vardecl['_toString']|1770: vardecl['_hasOwnProperty']|1771: vardecl['NULL_TYPE']|1772: vardecl['UNDEFINED_TYPE']|1773: vardecl['BOOLEAN_TYPE']|1774: vardecl['NUMBER_TYPE']|1775: vardecl['STRING_TYPE']|1776: vardecl['OBJECT_TYPE']|1777: vardecl['FUNCTION_CLASS']|1778: vardecl['BOOLEAN_CLASS']|1779: vardecl['NUMBER_CLASS']|1780: vardecl['STRING_CLASS']|1781: vardecl['ARRAY_CLASS']|1782: vardecl['DATE_CLASS']|1783: vardecl['NATIVE_JSON_STRINGIFY_SUPPORT']|1784: vardecl['DONT_ENUMS']|1785: vardecl['IS_DONTENUM_BUGGY']|1786: function-decl[function Type ( o ),-]|1787: function-decl[function extend ( destination source ),-]|1788: function-decl[function inspect ( object ),-]|1789: function-decl[function toJSON ( value ),-]|1790: function-decl[function Str ( key holder stack ),-]|1791: function-decl[function stringify ( object ),-]|1792: function-decl[function toQueryString ( object ),-]|1793: function-decl[function toHTML ( object ),-]|1794: function-decl[function keys ( object ),-]|1795: function-decl[function values ( object ),-]|1796: function-decl[function clone ( object ),-]|1797: function-decl[function isElement ( object ),-]|1798: function-decl[function isArray ( object ),-]|1799: vardecl['hasNativeIsArray']|1800: function-decl[function isHash ( object ),-]|1801: function-decl[function isFunction ( object ),-]|1802: function-decl[function isString ( object ),-]|1803: function-decl[function isNumber ( object ),-]|1804: function-decl[function isDate ( object ),-]|1805: function-decl[function isUndefined ( object ),-]}" ] 
BB522 -> BB523 [tailport=s, headport=n, headlabel="      523"]
BB523 [shape=record label="{1806: read-variable['Object',v4,-]|1807: read-property[v4,'prototype',v3]|1808: \<variable-non-null-undef\>['Object']|1809: read-property[v3,'toString',v2]|1810: \<property-non-null-undef\>[v4,'prototype']|1811: write-variable[v2,'_toString']*|1812: read-variable['Object',v7,-]|1813: read-property[v7,'prototype',v6]|1814: \<variable-non-null-undef\>['Object']|1815: read-property[v6,'hasOwnProperty',v5]|1816: \<property-non-null-undef\>[v7,'prototype']|1817: write-variable[v5,'_hasOwnProperty']*|1818: constant[\"Null\",v8]|1819: write-variable[v8,'NULL_TYPE']*|1820: constant[\"Undefined\",v9]|1821: write-variable[v9,'UNDEFINED_TYPE']*|1822: constant[\"Boolean\",v10]|1823: write-variable[v10,'BOOLEAN_TYPE']*|1824: constant[\"Number\",v11]|1825: write-variable[v11,'NUMBER_TYPE']*|1826: constant[\"String\",v12]|1827: write-variable[v12,'STRING_TYPE']*|1828: constant[\"Object\",v13]|1829: write-variable[v13,'OBJECT_TYPE']*|1830: constant[\"[object Function]\",v14]|1831: write-variable[v14,'FUNCTION_CLASS']*|1832: constant[\"[object Boolean]\",v15]|1833: write-variable[v15,'BOOLEAN_CLASS']*|1834: constant[\"[object Number]\",v16]|1835: write-variable[v16,'NUMBER_CLASS']*|1836: constant[\"[object String]\",v17]|1837: write-variable[v17,'STRING_CLASS']*|1838: constant[\"[object Array]\",v18]|1839: write-variable[v18,'ARRAY_CLASS']*|1840: constant[\"[object Date]\",v19]|1841: write-variable[v19,'DATE_CLASS']*|1842: read-variable['window',v21,-]|1843: read-property[v21,'JSON',v20]|1844: \<variable-non-null-undef\>['window']|1845: if[v20](true-block:524,false-block:531)}" ] 
BB523 -> BB531 [tailport=s, headport=n, headlabel="      531"]
BB523 -> BB524 [tailport=s, headport=n, headlabel="      524"]
BB523 -> BB553 [tailport=s, headport=n, color=gray, headlabel="      553"]
BB524 [shape=record label="{1846: read-variable['JSON',v25,-]|1847: read-property[v25,'stringify',v24]|1848: \<variable-non-null-undef\>['JSON']|1849: typeof[v24,v22]|1850: constant[\"function\",v23]|1851: ===[v22,v23,v20]|1852: if[v20](true-block:525,false-block:531)}" ] 
BB524 -> BB531 [tailport=s, headport=n]
BB524 -> BB525 [tailport=s, headport=n, headlabel="      525"]
BB524 -> BB553 [tailport=s, headport=n, color=gray]
BB525 [shape=record label="{1853: read-variable['JSON',v29,-]|1854: read-property[v29,'stringify',-]|1855: \<variable-non-null-undef\>['JSON']|1856: constant[0.0,v30]}" ] 
BB525 -> BB526 [tailport=s, headport=n, headlabel="      526"]
BB525 -> BB553 [tailport=s, headport=n, color=gray]
BB526 [shape=record label="{1857: call-JSON.stringify [v29,'stringify',v30,v26]}" ] 
BB526 -> BB527 [tailport=s, headport=n, headlabel="      527"]
BB526 -> BB553 [tailport=s, headport=n, color=gray]
BB527 [shape=record label="{1858: constant[\"0\",v27]|1859: ===[v26,v27,v20]|1860: if[v20](true-block:528,false-block:531)}" ] 
BB527 -> BB531 [tailport=s, headport=n]
BB527 -> BB528 [tailport=s, headport=n, headlabel="      528"]
BB527 -> BB553 [tailport=s, headport=n, color=gray]
BB528 [shape=record label="{1861: read-variable['JSON',v35,-]|1862: read-property[v35,'stringify',-]|1863: \<variable-non-null-undef\>['JSON']|1864: read-variable['Prototype',v37,-]|1865: read-property[v37,'K',v36]|1866: \<variable-non-null-undef\>['Prototype']}" ] 
BB528 -> BB529 [tailport=s, headport=n, headlabel="      529"]
BB528 -> BB553 [tailport=s, headport=n, color=gray]
BB529 [shape=record label="{1867: call-JSON.stringify [v35,'stringify',v36,v33]}" ] 
BB529 -> BB530 [tailport=s, headport=n, headlabel="      530"]
BB529 -> BB553 [tailport=s, headport=n, color=gray]
BB530 [shape=record label="{1868: typeof[v33,v31]|1869: constant[\"undefined\",v32]|1870: ===[v31,v32,v20]}" ] 
BB530 -> BB531 [tailport=s, headport=n]
BB530 -> BB553 [tailport=s, headport=n, color=gray]
BB531 [shape=record label="{1871: write-variable[v20,'NATIVE_JSON_STRINGIFY_SUPPORT']*|1872: read-variable['Array',v23,-]|1873: constant[\"toString\",v24]|1874: constant[\"toLocaleString\",v25]|1875: constant[\"valueOf\",v26]|1876: constant[\"hasOwnProperty\",v27]|1877: constant[\"isPrototypeOf\",v28]|1878: constant[\"propertyIsEnumerable\",v29]|1879: constant[\"constructor\",v30]}" ] 
BB531 -> BB532 [tailport=s, headport=n, headlabel="      532"]
BB531 -> BB553 [tailport=s, headport=n, color=gray]
BB532 [shape=record label="{1880: construct [-,v23,v24,v25,v26,v27,v28,v29,v30,v22]}" ] 
BB532 -> BB533 [tailport=s, headport=n, headlabel="      533"]
BB532 -> BB553 [tailport=s, headport=n, color=gray]
BB533 [shape=record label="{1881: write-variable[v22,'DONT_ENUMS']*|1882: function-expr[function ( ),v32]}" ] 
BB533 -> BB534 [tailport=s, headport=n, headlabel="      534"]
BB534 [shape=record label="{1883: call-null [-,v32,v31]}" ] 
BB534 -> BB535 [tailport=s, headport=n, headlabel="      535"]
BB534 -> BB553 [tailport=s, headport=n, color=gray]
BB535 [shape=record label="{1884: write-variable[v31,'IS_DONTENUM_BUGGY']*|1885: read-variable['Array',v37,-]|1886: read-property[v37,'isArray',v36]|1887: \<variable-non-null-undef\>['Array']|1888: typeof[v36,v34]|1889: constant[\"function\",v35]|1890: ==[v34,v35,v33]|1891: if[v33](true-block:536,false-block:543)}" ] 
BB535 -> BB543 [tailport=s, headport=n, headlabel="      543"]
BB535 -> BB536 [tailport=s, headport=n, headlabel="      536"]
BB535 -> BB553 [tailport=s, headport=n, color=gray]
BB536 [shape=record label="{1892: read-variable['Array',v39,-]|1893: read-property[v39,'isArray',-]|1894: \<variable-non-null-undef\>['Array']|1895: read-variable['Array',v41,-]}" ] 
BB536 -> BB537 [tailport=s, headport=n, headlabel="      537"]
BB536 -> BB553 [tailport=s, headport=n, color=gray]
BB537 [shape=record label="{1896: construct [-,v41,v40]}" ] 
BB537 -> BB538 [tailport=s, headport=n, headlabel="      538"]
BB537 -> BB553 [tailport=s, headport=n, color=gray]
BB538 [shape=record label="{1897: call-Array.isArray [v39,'isArray',v40,v33]}" ] 
BB538 -> BB539 [tailport=s, headport=n, headlabel="      539"]
BB538 -> BB553 [tailport=s, headport=n, color=gray]
BB539 [shape=record label="{1898: if[v33](true-block:540,false-block:543)}" ] 
BB539 -> BB543 [tailport=s, headport=n]
BB539 -> BB540 [tailport=s, headport=n, headlabel="      540"]
BB540 [shape=record label="{1899: read-variable['Array',v44,-]|1900: read-property[v44,'isArray',-]|1901: \<variable-non-null-undef\>['Array']|1902: new[v45]}" ] 
BB540 -> BB541 [tailport=s, headport=n, headlabel="      541"]
BB540 -> BB553 [tailport=s, headport=n, color=gray]
BB541 [shape=record label="{1903: call-Array.isArray [v44,'isArray',v45,v42]}" ] 
BB541 -> BB542 [tailport=s, headport=n, headlabel="      542"]
BB541 -> BB553 [tailport=s, headport=n, color=gray]
BB542 [shape=record label="{1904: ![v42,v33]}" ] 
BB542 -> BB543 [tailport=s, headport=n]
BB542 -> BB553 [tailport=s, headport=n, color=gray]
BB543 [shape=record label="{1905: write-variable[v33,'hasNativeIsArray']*|1906: read-variable['hasNativeIsArray',v38,-]|1907: if[v38](true-block:544,false-block:545)}" ] 
BB543 -> BB544 [tailport=s, headport=n, headlabel="      544"]
BB543 -> BB545 [tailport=s, headport=n, headlabel="      545"]
BB543 -> BB553 [tailport=s, headport=n, color=gray]
BB544 [shape=record label="{1908: read-variable['Array',v40,-]|1909: read-property[v40,'isArray',v39]|1910: \<variable-non-null-undef\>['Array']|1911: write-variable[v39,'isArray']*}" ] 
BB544 -> BB545 [tailport=s, headport=n]
BB544 -> BB553 [tailport=s, headport=n, color=gray]
BB545 [shape=record label="{1912: read-variable['extend',v40,v39]|1913: read-variable['Object',v41,-]|1914: new[v42]|1915: read-variable['extend',v43,-]|1916: write-property[v42,'extend',v43]|1917: read-variable['inspect',v44,-]|1918: write-property[v42,'inspect',v44]|1919: read-variable['NATIVE_JSON_STRINGIFY_SUPPORT',v46,-]|1920: if[v46](true-block:546,false-block:547)}" ] 
BB545 -> BB546 [tailport=s, headport=n, headlabel="      546"]
BB545 -> BB547 [tailport=s, headport=n, headlabel="      547"]
BB545 -> BB553 [tailport=s, headport=n, color=gray]
BB546 [shape=record label="{1921: read-variable['stringify',v45,-]}" ] 
BB546 -> BB548 [tailport=s, headport=n, headlabel="      548"]
BB546 -> BB553 [tailport=s, headport=n, color=gray]
BB547 [shape=record label="{1922: read-variable['toJSON',v45,-]}" ] 
BB547 -> BB548 [tailport=s, headport=n]
BB547 -> BB553 [tailport=s, headport=n, color=gray]
BB548 [shape=record label="{1923: write-property[v42,'toJSON',v45]|1924: read-variable['toQueryString',v47,-]|1925: write-property[v42,'toQueryString',v47]|1926: read-variable['toHTML',v48,-]|1927: write-property[v42,'toHTML',v48]|1928: read-variable['Object',v50,-]|1929: read-property[v50,'keys',v49]|1930: \<variable-non-null-undef\>['Object']|1931: if[v49](true-block:550,false-block:549)}" ] 
BB548 -> BB550 [tailport=s, headport=n, headlabel="      550"]
BB548 -> BB549 [tailport=s, headport=n, headlabel="      549"]
BB548 -> BB553 [tailport=s, headport=n, color=gray]
BB549 [shape=record label="{1932: read-variable['keys',v49,-]}" ] 
BB549 -> BB550 [tailport=s, headport=n]
BB549 -> BB553 [tailport=s, headport=n, color=gray]
BB550 [shape=record label="{1933: write-property[v42,'keys',v49]|1934: read-variable['values',v50,-]|1935: write-property[v42,'values',v50]|1936: read-variable['clone',v51,-]|1937: write-property[v42,'clone',v51]|1938: read-variable['isElement',v52,-]|1939: write-property[v42,'isElement',v52]|1940: read-variable['isArray',v53,-]|1941: write-property[v42,'isArray',v53]|1942: read-variable['isHash',v54,-]|1943: write-property[v42,'isHash',v54]|1944: read-variable['isFunction',v55,-]|1945: write-property[v42,'isFunction',v55]|1946: read-variable['isString',v56,-]|1947: write-property[v42,'isString',v56]|1948: read-variable['isNumber',v57,-]|1949: write-property[v42,'isNumber',v57]|1950: read-variable['isDate',v58,-]|1951: write-property[v42,'isDate',v58]|1952: read-variable['isUndefined',v59,-]|1953: write-property[v42,'isUndefined',v59]}" ] 
BB550 -> BB551 [tailport=s, headport=n, headlabel="      551"]
BB550 -> BB553 [tailport=s, headport=n, color=gray]
BB551 [shape=record label="{1954: call-extend [v39,v40,v41,v42,-]*}" ] 
BB551 -> BB552 [tailport=s, headport=n, headlabel="      552"]
BB551 -> BB553 [tailport=s, headport=n, color=gray]
BB552 [shape=record label="{1955: return[v1]}" ] 
BB553 [shape=record label="{1956: exceptional-return}" ] 
//#$~ 366
}
