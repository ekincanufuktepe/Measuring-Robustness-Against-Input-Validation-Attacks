digraph {
rankdir="TD"
BB_entry826[shape=none,label=""];
BB_entry826 -> BB10768 [tailport=s, headport=n, headlabel="    10768"]
BB10768 [shape=record label="{27964: constant[undefined,v1]|27965: vardecl['deferred']|27966: vardecl['counter']|27967: vardecl['results']}" ] 
BB10768 -> BB10769 [tailport=s, headport=n, headlabel="      10769"]
BB10769 [shape=record label="{27968: read-variable['Deferred',v3,-]}" ] 
BB10769 -> BB10770 [tailport=s, headport=n, headlabel="      10770"]
BB10769 -> BB10784 [tailport=s, headport=n, color=gray, headlabel="      10784"]
BB10770 [shape=record label="{27969: construct [-,v3,v2]}" ] 
BB10770 -> BB10771 [tailport=s, headport=n, headlabel="      10771"]
BB10770 -> BB10784 [tailport=s, headport=n, color=gray]
BB10771 [shape=record label="{27970: write-variable[v2,'deferred']*|27971: constant[0.0,v4]|27972: write-variable[v4,'counter']*|27973: read-variable['isArray',v8,v7]|27974: read-variable['promises',v9,-]}" ] 
BB10771 -> BB10772 [tailport=s, headport=n, headlabel="      10772"]
BB10771 -> BB10784 [tailport=s, headport=n, color=gray]
BB10772 [shape=record label="{27975: call-isArray [v7,v8,v9,v6]}" ] 
BB10772 -> BB10773 [tailport=s, headport=n, headlabel="      10773"]
BB10772 -> BB10784 [tailport=s, headport=n, color=gray]
BB10773 [shape=record label="{27976: if[v6](true-block:10774,false-block:10775)}" ] 
BB10773 -> BB10774 [tailport=s, headport=n, headlabel="      10774"]
BB10773 -> BB10775 [tailport=s, headport=n, headlabel="      10775"]
BB10774 [shape=record label="{27977: read-variable['Array',v10,-]}" ] 
BB10774 -> BB10776 [tailport=s, headport=n, headlabel="      10776"]
BB10774 -> BB10784 [tailport=s, headport=n, color=gray]
BB10775 [shape=record label="{27978: new[v5]}" ] 
BB10775 -> BB10777 [tailport=s, headport=n, headlabel="      10777"]
BB10776 [shape=record label="{27979: construct [-,v10,v5]}" ] 
BB10776 -> BB10777 [tailport=s, headport=n]
BB10776 -> BB10784 [tailport=s, headport=n, color=gray]
BB10777 [shape=record label="{27980: write-variable[v5,'results']*|27981: read-variable['forEach',v11,v10]|27982: read-variable['promises',v12,-]|27983: function-expr[function ( promise key ),v13]}" ] 
BB10777 -> BB10778 [tailport=s, headport=n, headlabel="      10778"]
BB10777 -> BB10784 [tailport=s, headport=n, color=gray]
BB10778 [shape=record label="{27984: call-forEach [v10,v11,v12,v13,-]*}" ] 
BB10778 -> BB10779 [tailport=s, headport=n, headlabel="      10779"]
BB10778 -> BB10784 [tailport=s, headport=n, color=gray]
BB10779 [shape=record label="{27985: read-variable['counter',v15,-]|27986: constant[0.0,v16]|27987: ===[v15,v16,v14]|27988: if[v14](true-block:10780,false-block:10782)}" ] 
BB10779 -> BB10780 [tailport=s, headport=n, headlabel="      10780"]
BB10779 -> BB10782 [tailport=s, headport=n, headlabel="      10782"]
BB10779 -> BB10784 [tailport=s, headport=n, color=gray]
BB10780 [shape=record label="{27989: read-variable['deferred',v18,-]|27990: read-property[v18,'resolve',-]|27991: \<variable-non-null-undef\>['deferred']|27992: read-variable['results',v19,-]}" ] 
BB10780 -> BB10781 [tailport=s, headport=n, headlabel="      10781"]
BB10780 -> BB10784 [tailport=s, headport=n, color=gray]
BB10781 [shape=record label="{27993: call-deferred.resolve [v18,'resolve',v19,-]*}" ] 
BB10781 -> BB10782 [tailport=s, headport=n]
BB10781 -> BB10784 [tailport=s, headport=n, color=gray]
BB10782 [shape=record label="{27994: read-variable['deferred',v17,-]|27995: read-property[v17,'promise',v1]|27996: \<variable-non-null-undef\>['deferred']}" ] 
BB10782 -> BB10783 [tailport=s, headport=n, headlabel="      10783"]
BB10782 -> BB10784 [tailport=s, headport=n, color=gray]
BB10783 [shape=record label="{27997: return[v1]}" ] 
BB10784 [shape=record label="{27998: exceptional-return}" ] 
//#$~ 14802
}
