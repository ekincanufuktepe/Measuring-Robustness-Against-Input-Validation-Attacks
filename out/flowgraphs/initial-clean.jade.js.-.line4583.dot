digraph {
rankdir="TD"
BB_entry282[shape=none,label=""];
BB_entry282 -> BB7537 [tailport=s, headport=n, headlabel="    7537"]
BB7537 [shape=record label="{22043: constant[undefined,v1]|22044: vardecl['options']|22045: vardecl['input']|22046: vardecl['inputLen']|22047: vardecl['sourceFile']|22048: vardecl['defaultOptions']|22049: vardecl['isArray']|22050: function-decl[function setOptions ( opts ),-]|22051: vardecl['getLineInfo']|22052: function-decl[function Token ( ),-]|22053: vardecl['tokPos']|22054: vardecl['tokStart']|22055: vardecl['tokEnd']|22056: vardecl['tokStartLoc']|22057: vardecl['tokEndLoc']|22058: vardecl['tokType']|22059: vardecl['tokVal']|22060: vardecl['tokRegexpAllowed']|22061: vardecl['tokCurLine']|22062: vardecl['tokLineStart']|22063: vardecl['lastStart']|22064: vardecl['lastEnd']|22065: vardecl['lastEndLoc']|22066: vardecl['inFunction']|22067: vardecl['inGenerator']|22068: vardecl['labels']|22069: vardecl['strict']|22070: vardecl['metParenL']|22071: vardecl['inTemplate']|22072: function-decl[function raise ( pos message ),-]|22073: vardecl['empty']|22074: vardecl['_num']|22075: vardecl['_regexp']|22076: vardecl['_string']|22077: vardecl['_name']|22078: vardecl['_eof']|22079: vardecl['_break']|22080: vardecl['_case']|22081: vardecl['_catch']|22082: vardecl['_continue']|22083: vardecl['_debugger']|22084: vardecl['_default']|22085: vardecl['_do']|22086: vardecl['_else']|22087: vardecl['_finally']|22088: vardecl['_for']|22089: vardecl['_function']|22090: vardecl['_if']|22091: vardecl['_return']|22092: vardecl['_switch']|22093: vardecl['_throw']|22094: vardecl['_try']|22095: vardecl['_var']|22096: vardecl['_let']|22097: vardecl['_const']|22098: vardecl['_while']|22099: vardecl['_with']|22100: vardecl['_new']|22101: vardecl['_this']|22102: vardecl['_class']|22103: vardecl['_extends']|22104: vardecl['_export']|22105: vardecl['_import']|22106: vardecl['_yield']|22107: vardecl['_null']|22108: vardecl['_true']|22109: vardecl['_false']|22110: vardecl['_in']|22111: vardecl['keywordTypes']|22112: vardecl['_bracketL']|22113: vardecl['_bracketR']|22114: vardecl['_braceL']|22115: vardecl['_braceR']|22116: vardecl['_parenL']|22117: vardecl['_parenR']|22118: vardecl['_comma']|22119: vardecl['_semi']|22120: vardecl['_colon']|22121: vardecl['_dot']|22122: vardecl['_ellipsis']|22123: vardecl['_question']|22124: vardecl['_arrow']|22125: vardecl['_bquote']|22126: vardecl['_dollarBraceL']|22127: vardecl['_slash']|22128: vardecl['_eq']|22129: vardecl['_assign']|22130: vardecl['_incDec']|22131: vardecl['_prefix']|22132: vardecl['_logicalOR']|22133: vardecl['_logicalAND']|22134: vardecl['_bitwiseOR']|22135: vardecl['_bitwiseXOR']|22136: vardecl['_bitwiseAND']|22137: vardecl['_equality']|22138: vardecl['_relational']|22139: vardecl['_bitShift']|22140: vardecl['_plusMin']|22141: vardecl['_modulo']|22142: vardecl['_star']|22143: vardecl['kw']|22144: function-decl[function makePredicate ( words ),-]|22145: vardecl['isReservedWord3']|22146: vardecl['isReservedWord5']|22147: vardecl['isStrictReservedWord']|22148: vardecl['isStrictBadIdWord']|22149: vardecl['ecma5AndLessKeywords']|22150: vardecl['isEcma5AndLessKeyword']|22151: vardecl['isEcma6Keyword']|22152: vardecl['isKeyword']|22153: vardecl['nonASCIIwhitespace']|22154: vardecl['nonASCIIidentifierStartChars']|22155: vardecl['nonASCIIidentifierChars']|22156: vardecl['nonASCIIidentifierStart']|22157: vardecl['nonASCIIidentifier']|22158: vardecl['newline']|22159: vardecl['lineBreak']|22160: vardecl['isIdentifierStart']|22161: vardecl['isIdentifierChar']|22162: function-decl[function Position ( ),-]|22163: function-decl[function initTokenState ( ),-]|22164: function-decl[function finishToken ( type val shouldSkipSpace ),-]|22165: function-decl[function skipBlockComment ( ),-]|22166: function-decl[function skipLineComment ( startSkip ),-]|22167: function-decl[function skipSpace ( ),-]|22168: function-decl[function readToken_dot ( ),-]|22169: function-decl[function readToken_slash ( ),-]|22170: function-decl[function readToken_mult_modulo ( code ),-]|22171: function-decl[function readToken_pipe_amp ( code ),-]|22172: function-decl[function readToken_caret ( ),-]|22173: function-decl[function readToken_plus_min ( code ),-]|22174: function-decl[function readToken_lt_gt ( code ),-]|22175: function-decl[function readToken_eq_excl ( code ),-]|22176: function-decl[function getTemplateToken ( code ),-]|22177: function-decl[function getTokenFromCode ( code ),-]|22178: function-decl[function readToken ( forceRegexp ),-]|22179: function-decl[function finishOp ( type size ),-]|22180: function-decl[function readRegexp ( ),-]|22181: function-decl[function readInt ( radix len ),-]|22182: function-decl[function readRadixNumber ( radix ),-]|22183: function-decl[function readNumber ( startsWithDot ),-]|22184: function-decl[function readCodePoint ( ),-]|22185: function-decl[function readString ( quote ),-]|22186: function-decl[function readTmplString ( ),-]|22187: function-decl[function readEscapedChar ( ),-]|22188: function-decl[function readHexChar ( len ),-]|22189: vardecl['containsEsc']|22190: function-decl[function readWord1 ( ),-]|22191: function-decl[function readWord ( ),-]|22192: function-decl[function next ( ),-]|22193: function-decl[function setStrict ( strct ),-]|22194: function-decl[function Node ( ),-]|22195: function-decl[function SourceLocation ( ),-]|22196: function-decl[function startNode ( ),-]|22197: function-decl[function startNodeFrom ( other ),-]|22198: function-decl[function finishNode ( node type ),-]|22199: function-decl[function isUseStrict ( stmt ),-]|22200: function-decl[function eat ( type ),-]|22201: function-decl[function canInsertSemicolon ( ),-]|22202: function-decl[function semicolon ( ),-]|22203: function-decl[function expect ( type ),-]|22204: function-decl[function unexpected ( pos ),-]|22205: function-decl[function has ( obj propName ),-]|22206: function-decl[function toAssignable ( node allowSpread checkType ),-]|22207: function-decl[function checkSpreadAssign ( node ),-]|22208: function-decl[function checkFunctionParam ( param nameHash ),-]|22209: function-decl[function checkPropClash ( prop propHash ),-]|22210: function-decl[function checkLVal ( expr isBinding ),-]|22211: function-decl[function parseTopLevel ( program ),-]|22212: vardecl['loopLabel']|22213: vardecl['switchLabel']|22214: function-decl[function parseStatement ( ),-]|22215: function-decl[function parseBreakContinueStatement ( node keyword ),-]|22216: function-decl[function parseDebuggerStatement ( node ),-]|22217: function-decl[function parseDoStatement ( node ),-]|22218: function-decl[function parseForStatement ( node ),-]|22219: function-decl[function parseFunctionStatement ( node ),-]|22220: function-decl[function parseIfStatement ( node ),-]|22221: function-decl[function parseReturnStatement ( node ),-]|22222: function-decl[function parseSwitchStatement ( node ),-]|22223: function-decl[function parseThrowStatement ( node ),-]|22224: function-decl[function parseTryStatement ( node ),-]|22225: function-decl[function parseVarStatement ( node kind ),-]|22226: function-decl[function parseWhileStatement ( node ),-]|22227: function-decl[function parseWithStatement ( node ),-]|22228: function-decl[function parseEmptyStatement ( node ),-]|22229: function-decl[function parseLabeledStatement ( node maybeName expr ),-]|22230: function-decl[function parseExpressionStatement ( node expr ),-]|22231: function-decl[function parseParenExpression ( ),-]|22232: function-decl[function parseBlock ( allowStrict ),-]|22233: function-decl[function parseFor ( node init ),-]|22234: function-decl[function parseForIn ( node init ),-]|22235: function-decl[function parseVar ( node noIn kind ),-]|22236: function-decl[function parseExpression ( noComma noIn ),-]|22237: function-decl[function parseMaybeAssign ( noIn ),-]|22238: function-decl[function parseMaybeConditional ( noIn ),-]|22239: function-decl[function parseExprOps ( noIn ),-]|22240: function-decl[function parseExprOp ( left minPrec noIn ),-]|22241: function-decl[function parseMaybeUnary ( ),-]|22242: function-decl[function parseExprSubscripts ( ),-]|22243: function-decl[function parseSubscripts ( base noCalls ),-]|22244: function-decl[function parseExprAtom ( ),-]|22245: function-decl[function parseNew ( ),-]|22246: function-decl[function parseSpread ( ),-]|22247: function-decl[function parseTemplate ( ),-]|22248: function-decl[function parseObj ( ),-]|22249: function-decl[function parsePropertyName ( prop ),-]|22250: function-decl[function initFunction ( node ),-]|22251: function-decl[function parseFunction ( node isStatement allowExpressionBody ),-]|22252: function-decl[function parseMethod ( isGenerator ),-]|22253: function-decl[function parseArrowExpression ( node params ),-]|22254: function-decl[function parseFunctionParams ( node ),-]|22255: function-decl[function parseFunctionBody ( node allowExpression ),-]|22256: function-decl[function parseClass ( node isStatement ),-]|22257: function-decl[function parseExprList ( close allowTrailingComma allowEmpty ),-]|22258: function-decl[function parseIdent ( liberal ),-]|22259: function-decl[function parseExport ( node ),-]|22260: function-decl[function parseExportSpecifiers ( ),-]|22261: function-decl[function parseImport ( node ),-]|22262: function-decl[function parseImportSpecifiers ( ),-]|22263: function-decl[function parseYield ( ),-]|22264: function-decl[function parseComprehension ( node isGenerator ),-]}" ] 
BB7537 -> BB7538 [tailport=s, headport=n, headlabel="      7538"]
BB7538 [shape=record label="{22265: read-variable['exports',v3,-]|22266: constant[\"0.8.0\",v2]|22267: write-property[v3,'version',v2]|22268: \<variable-non-null-undef\>['exports']*|22269: read-variable['exports',v5,-]|22270: function-expr[function ( inpt opts ),v4]|22271: write-property[v5,'parse',v4]|22272: \<variable-non-null-undef\>['exports']*|22273: read-variable['exports',v7,-]|22274: new[v6]|22275: constant[5.0,v8]|22276: write-property[v6,'ecmaVersion',v8]|22277: constant[false,v9]|22278: write-property[v6,'strictSemicolons',v9]|22279: constant[true,v10]|22280: write-property[v6,'allowTrailingCommas',v10]|22281: constant[false,v11]|22282: write-property[v6,'forbidReserved',v11]|22283: constant[false,v12]|22284: write-property[v6,'allowReturnOutsideFunction',v12]|22285: constant[false,v13]|22286: write-property[v6,'locations',v13]|22287: constant[null,v14]|22288: write-property[v6,'onToken',v14]|22289: constant[null,v15]|22290: write-property[v6,'onComment',v15]|22291: constant[false,v16]|22292: write-property[v6,'ranges',v16]|22293: constant[null,v17]|22294: write-property[v6,'program',v17]|22295: constant[null,v18]|22296: write-property[v6,'sourceFile',v18]|22297: constant[null,v19]|22298: write-property[v6,'directSourceFile',v19]|22299: write-property[v7,'defaultOptions',v6]|22300: \<variable-non-null-undef\>['exports']|22301: write-variable[v6,'defaultOptions']*|22302: function-expr[function ( obj ),v20]|22303: write-variable[v20,'isArray']*|22304: read-variable['exports',v22,-]|22305: function-expr[function ( input offset ),v21]|22306: write-property[v22,'getLineInfo',v21]|22307: \<variable-non-null-undef\>['exports']|22308: write-variable[v21,'getLineInfo']*|22309: read-variable['exports',v24,-]|22310: read-variable['Token',v23,-]|22311: write-property[v24,'Token',v23]|22312: \<variable-non-null-undef\>['exports']*|22313: read-variable['exports',v26,-]|22314: function-expr[function ( inpt opts ),v25]|22315: write-property[v26,'tokenize',v25]|22316: \<variable-non-null-undef\>['exports']*|22317: read-variable['Array',v28,-]}" ] 
BB7538 -> BB7539 [tailport=s, headport=n, headlabel="      7539"]
BB7538 -> BB7569 [tailport=s, headport=n, color=gray, headlabel="      7569"]
BB7539 [shape=record label="{22318: construct [-,v28,v27]}" ] 
BB7539 -> BB7540 [tailport=s, headport=n, headlabel="      7540"]
BB7539 -> BB7569 [tailport=s, headport=n, color=gray]
BB7540 [shape=record label="{22319: write-variable[v27,'empty']*|22320: new[v29]|22321: constant[\"num\",v30]|22322: write-property[v29,'type',v30]|22323: write-variable[v29,'_num']*|22324: new[v31]|22325: constant[\"regexp\",v32]|22326: write-property[v31,'type',v32]|22327: write-variable[v31,'_regexp']*|22328: new[v33]|22329: constant[\"string\",v34]|22330: write-property[v33,'type',v34]|22331: write-variable[v33,'_string']*|22332: new[v35]|22333: constant[\"name\",v36]|22334: write-property[v35,'type',v36]|22335: write-variable[v35,'_name']*|22336: new[v37]|22337: constant[\"eof\",v38]|22338: write-property[v37,'type',v38]|22339: write-variable[v37,'_eof']*|22340: new[v39]|22341: constant[\"break\",v40]|22342: write-property[v39,'keyword',v40]|22343: write-variable[v39,'_break']*|22344: new[v41]|22345: constant[\"case\",v42]|22346: write-property[v41,'keyword',v42]|22347: constant[true,v43]|22348: write-property[v41,'beforeExpr',v43]|22349: write-variable[v41,'_case']*|22350: new[v44]|22351: constant[\"catch\",v45]|22352: write-property[v44,'keyword',v45]|22353: write-variable[v44,'_catch']*|22354: new[v46]|22355: constant[\"continue\",v47]|22356: write-property[v46,'keyword',v47]|22357: write-variable[v46,'_continue']*|22358: new[v48]|22359: constant[\"debugger\",v49]|22360: write-property[v48,'keyword',v49]|22361: write-variable[v48,'_debugger']*|22362: new[v50]|22363: constant[\"default\",v51]|22364: write-property[v50,'keyword',v51]|22365: write-variable[v50,'_default']*|22366: new[v52]|22367: constant[\"do\",v53]|22368: write-property[v52,'keyword',v53]|22369: constant[true,v54]|22370: write-property[v52,'isLoop',v54]|22371: write-variable[v52,'_do']*|22372: new[v55]|22373: constant[\"else\",v56]|22374: write-property[v55,'keyword',v56]|22375: constant[true,v57]|22376: write-property[v55,'beforeExpr',v57]|22377: write-variable[v55,'_else']*|22378: new[v58]|22379: constant[\"finally\",v59]|22380: write-property[v58,'keyword',v59]|22381: write-variable[v58,'_finally']*|22382: new[v60]|22383: constant[\"for\",v61]|22384: write-property[v60,'keyword',v61]|22385: constant[true,v62]|22386: write-property[v60,'isLoop',v62]|22387: write-variable[v60,'_for']*|22388: new[v63]|22389: constant[\"function\",v64]|22390: write-property[v63,'keyword',v64]|22391: write-variable[v63,'_function']*|22392: new[v65]|22393: constant[\"if\",v66]|22394: write-property[v65,'keyword',v66]|22395: write-variable[v65,'_if']*|22396: new[v67]|22397: constant[\"return\",v68]|22398: write-property[v67,'keyword',v68]|22399: constant[true,v69]|22400: write-property[v67,'beforeExpr',v69]|22401: write-variable[v67,'_return']*|22402: new[v70]|22403: constant[\"switch\",v71]|22404: write-property[v70,'keyword',v71]|22405: write-variable[v70,'_switch']*|22406: new[v72]|22407: constant[\"throw\",v73]|22408: write-property[v72,'keyword',v73]|22409: constant[true,v74]|22410: write-property[v72,'beforeExpr',v74]|22411: write-variable[v72,'_throw']*|22412: new[v75]|22413: constant[\"try\",v76]|22414: write-property[v75,'keyword',v76]|22415: write-variable[v75,'_try']*|22416: new[v77]|22417: constant[\"var\",v78]|22418: write-property[v77,'keyword',v78]|22419: write-variable[v77,'_var']*|22420: new[v79]|22421: constant[\"let\",v80]|22422: write-property[v79,'keyword',v80]|22423: write-variable[v79,'_let']*|22424: new[v81]|22425: constant[\"const\",v82]|22426: write-property[v81,'keyword',v82]|22427: write-variable[v81,'_const']*|22428: new[v83]|22429: constant[\"while\",v84]|22430: write-property[v83,'keyword',v84]|22431: constant[true,v85]|22432: write-property[v83,'isLoop',v85]|22433: write-variable[v83,'_while']*|22434: new[v86]|22435: constant[\"with\",v87]|22436: write-property[v86,'keyword',v87]|22437: write-variable[v86,'_with']*|22438: new[v88]|22439: constant[\"new\",v89]|22440: write-property[v88,'keyword',v89]|22441: constant[true,v90]|22442: write-property[v88,'beforeExpr',v90]|22443: write-variable[v88,'_new']*|22444: new[v91]|22445: constant[\"this\",v92]|22446: write-property[v91,'keyword',v92]|22447: write-variable[v91,'_this']*|22448: new[v93]|22449: constant[\"class\",v94]|22450: write-property[v93,'keyword',v94]|22451: write-variable[v93,'_class']*|22452: new[v95]|22453: constant[\"extends\",v96]|22454: write-property[v95,'keyword',v96]|22455: constant[true,v97]|22456: write-property[v95,'beforeExpr',v97]|22457: write-variable[v95,'_extends']*|22458: new[v98]|22459: constant[\"export\",v99]|22460: write-property[v98,'keyword',v99]|22461: write-variable[v98,'_export']*|22462: new[v100]|22463: constant[\"import\",v101]|22464: write-property[v100,'keyword',v101]|22465: write-variable[v100,'_import']*|22466: new[v102]|22467: constant[\"yield\",v103]|22468: write-property[v102,'keyword',v103]|22469: constant[true,v104]|22470: write-property[v102,'beforeExpr',v104]|22471: write-variable[v102,'_yield']*|22472: new[v105]|22473: constant[\"null\",v106]|22474: write-property[v105,'keyword',v106]|22475: constant[null,v107]|22476: write-property[v105,'atomValue',v107]|22477: write-variable[v105,'_null']*|22478: new[v108]|22479: constant[\"true\",v109]|22480: write-property[v108,'keyword',v109]|22481: constant[true,v110]|22482: write-property[v108,'atomValue',v110]|22483: write-variable[v108,'_true']*|22484: new[v111]|22485: constant[\"false\",v112]|22486: write-property[v111,'keyword',v112]|22487: constant[false,v113]|22488: write-property[v111,'atomValue',v113]|22489: write-variable[v111,'_false']*|22490: new[v114]|22491: constant[\"in\",v115]|22492: write-property[v114,'keyword',v115]|22493: constant[7.0,v116]|22494: write-property[v114,'binop',v116]|22495: constant[true,v117]|22496: write-property[v114,'beforeExpr',v117]|22497: write-variable[v114,'_in']*|22498: new[v118]|22499: read-variable['_break',v119,-]|22500: write-property[v118,'break',v119]|22501: read-variable['_case',v120,-]|22502: write-property[v118,'case',v120]|22503: read-variable['_catch',v121,-]|22504: write-property[v118,'catch',v121]|22505: read-variable['_continue',v122,-]|22506: write-property[v118,'continue',v122]|22507: read-variable['_debugger',v123,-]|22508: write-property[v118,'debugger',v123]|22509: read-variable['_default',v124,-]|22510: write-property[v118,'default',v124]|22511: read-variable['_do',v125,-]|22512: write-property[v118,'do',v125]|22513: read-variable['_else',v126,-]|22514: write-property[v118,'else',v126]|22515: read-variable['_finally',v127,-]|22516: write-property[v118,'finally',v127]|22517: read-variable['_for',v128,-]|22518: write-property[v118,'for',v128]|22519: read-variable['_function',v129,-]|22520: write-property[v118,'function',v129]|22521: read-variable['_if',v130,-]|22522: write-property[v118,'if',v130]|22523: read-variable['_return',v131,-]|22524: write-property[v118,'return',v131]|22525: read-variable['_switch',v132,-]|22526: write-property[v118,'switch',v132]|22527: read-variable['_throw',v133,-]|22528: write-property[v118,'throw',v133]|22529: read-variable['_try',v134,-]|22530: write-property[v118,'try',v134]|22531: read-variable['_var',v135,-]|22532: write-property[v118,'var',v135]|22533: read-variable['_let',v136,-]|22534: write-property[v118,'let',v136]|22535: read-variable['_const',v137,-]|22536: write-property[v118,'const',v137]|22537: read-variable['_while',v138,-]|22538: write-property[v118,'while',v138]|22539: read-variable['_with',v139,-]|22540: write-property[v118,'with',v139]|22541: read-variable['_null',v140,-]|22542: write-property[v118,'null',v140]|22543: read-variable['_true',v141,-]|22544: write-property[v118,'true',v141]|22545: read-variable['_false',v142,-]|22546: write-property[v118,'false',v142]|22547: read-variable['_new',v143,-]|22548: write-property[v118,'new',v143]|22549: read-variable['_in',v144,-]|22550: write-property[v118,'in',v144]|22551: new[v145]|22552: constant[\"instanceof\",v146]|22553: write-property[v145,'keyword',v146]|22554: constant[7.0,v147]|22555: write-property[v145,'binop',v147]|22556: constant[true,v148]|22557: write-property[v145,'beforeExpr',v148]|22558: write-property[v118,'instanceof',v145]|22559: read-variable['_this',v149,-]|22560: write-property[v118,'this',v149]|22561: new[v150]|22562: constant[\"typeof\",v151]|22563: write-property[v150,'keyword',v151]|22564: constant[true,v152]|22565: write-property[v150,'prefix',v152]|22566: constant[true,v153]|22567: write-property[v150,'beforeExpr',v153]|22568: write-property[v118,'typeof',v150]|22569: new[v154]|22570: constant[\"void\",v155]|22571: write-property[v154,'keyword',v155]|22572: constant[true,v156]|22573: write-property[v154,'prefix',v156]|22574: constant[true,v157]|22575: write-property[v154,'beforeExpr',v157]|22576: write-property[v118,'void',v154]|22577: new[v158]|22578: constant[\"delete\",v159]|22579: write-property[v158,'keyword',v159]|22580: constant[true,v160]|22581: write-property[v158,'prefix',v160]|22582: constant[true,v161]|22583: write-property[v158,'beforeExpr',v161]|22584: write-property[v118,'delete',v158]|22585: read-variable['_class',v162,-]|22586: write-property[v118,'class',v162]|22587: read-variable['_extends',v163,-]|22588: write-property[v118,'extends',v163]|22589: read-variable['_export',v164,-]|22590: write-property[v118,'export',v164]|22591: read-variable['_import',v165,-]|22592: write-property[v118,'import',v165]|22593: read-variable['_yield',v166,-]|22594: write-property[v118,'yield',v166]|22595: write-variable[v118,'keywordTypes']*|22596: new[v167]|22597: constant[\"[\",v168]|22598: write-property[v167,'type',v168]|22599: constant[true,v169]|22600: write-property[v167,'beforeExpr',v169]|22601: write-variable[v167,'_bracketL']*|22602: new[v170]|22603: constant[\"]\",v171]|22604: write-property[v170,'type',v171]|22605: write-variable[v170,'_bracketR']*|22606: new[v172]|22607: constant[\"\\\{\",v173]|22608: write-property[v172,'type',v173]|22609: constant[true,v174]|22610: write-property[v172,'beforeExpr',v174]|22611: write-variable[v172,'_braceL']*|22612: new[v175]|22613: constant[\"\\\}\",v176]|22614: write-property[v175,'type',v176]|22615: write-variable[v175,'_braceR']*|22616: new[v177]|22617: constant[\"(\",v178]|22618: write-property[v177,'type',v178]|22619: constant[true,v179]|22620: write-property[v177,'beforeExpr',v179]|22621: write-variable[v177,'_parenL']*|22622: new[v180]|22623: constant[\")\",v181]|22624: write-property[v180,'type',v181]|22625: write-variable[v180,'_parenR']*|22626: new[v182]|22627: constant[\",\",v183]|22628: write-property[v182,'type',v183]|22629: constant[true,v184]|22630: write-property[v182,'beforeExpr',v184]|22631: write-variable[v182,'_comma']*|22632: new[v185]|22633: constant[\";\",v186]|22634: write-property[v185,'type',v186]|22635: constant[true,v187]|22636: write-property[v185,'beforeExpr',v187]|22637: write-variable[v185,'_semi']*|22638: new[v188]|22639: constant[\":\",v189]|22640: write-property[v188,'type',v189]|22641: constant[true,v190]|22642: write-property[v188,'beforeExpr',v190]|22643: write-variable[v188,'_colon']*|22644: new[v191]|22645: constant[\".\",v192]|22646: write-property[v191,'type',v192]|22647: write-variable[v191,'_dot']*|22648: new[v193]|22649: constant[\"...\",v194]|22650: write-property[v193,'type',v194]|22651: write-variable[v193,'_ellipsis']*|22652: new[v195]|22653: constant[\"?\",v196]|22654: write-property[v195,'type',v196]|22655: constant[true,v197]|22656: write-property[v195,'beforeExpr',v197]|22657: write-variable[v195,'_question']*|22658: new[v198]|22659: constant[\"=\\\>\",v199]|22660: write-property[v198,'type',v199]|22661: constant[true,v200]|22662: write-property[v198,'beforeExpr',v200]|22663: write-variable[v198,'_arrow']*|22664: new[v201]|22665: constant[\"`\",v202]|22666: write-property[v201,'type',v202]|22667: write-variable[v201,'_bquote']*|22668: new[v203]|22669: constant[\"$\\\{\",v204]|22670: write-property[v203,'type',v204]|22671: constant[true,v205]|22672: write-property[v203,'beforeExpr',v205]|22673: write-variable[v203,'_dollarBraceL']*|22674: new[v206]|22675: constant[10.0,v207]|22676: write-property[v206,'binop',v207]|22677: constant[true,v208]|22678: write-property[v206,'beforeExpr',v208]|22679: write-variable[v206,'_slash']*|22680: new[v209]|22681: constant[true,v210]|22682: write-property[v209,'isAssign',v210]|22683: constant[true,v211]|22684: write-property[v209,'beforeExpr',v211]|22685: write-variable[v209,'_eq']*|22686: new[v212]|22687: constant[true,v213]|22688: write-property[v212,'isAssign',v213]|22689: constant[true,v214]|22690: write-property[v212,'beforeExpr',v214]|22691: write-variable[v212,'_assign']*|22692: new[v215]|22693: constant[true,v216]|22694: write-property[v215,'postfix',v216]|22695: constant[true,v217]|22696: write-property[v215,'prefix',v217]|22697: constant[true,v218]|22698: write-property[v215,'isUpdate',v218]|22699: write-variable[v215,'_incDec']*|22700: new[v219]|22701: constant[true,v220]|22702: write-property[v219,'prefix',v220]|22703: constant[true,v221]|22704: write-property[v219,'beforeExpr',v221]|22705: write-variable[v219,'_prefix']*|22706: new[v222]|22707: constant[1.0,v223]|22708: write-property[v222,'binop',v223]|22709: constant[true,v224]|22710: write-property[v222,'beforeExpr',v224]|22711: write-variable[v222,'_logicalOR']*|22712: new[v225]|22713: constant[2.0,v226]|22714: write-property[v225,'binop',v226]|22715: constant[true,v227]|22716: write-property[v225,'beforeExpr',v227]|22717: write-variable[v225,'_logicalAND']*|22718: new[v228]|22719: constant[3.0,v229]|22720: write-property[v228,'binop',v229]|22721: constant[true,v230]|22722: write-property[v228,'beforeExpr',v230]|22723: write-variable[v228,'_bitwiseOR']*|22724: new[v231]|22725: constant[4.0,v232]|22726: write-property[v231,'binop',v232]|22727: constant[true,v233]|22728: write-property[v231,'beforeExpr',v233]|22729: write-variable[v231,'_bitwiseXOR']*|22730: new[v234]|22731: constant[5.0,v235]|22732: write-property[v234,'binop',v235]|22733: constant[true,v236]|22734: write-property[v234,'beforeExpr',v236]|22735: write-variable[v234,'_bitwiseAND']*|22736: new[v237]|22737: constant[6.0,v238]|22738: write-property[v237,'binop',v238]|22739: constant[true,v239]|22740: write-property[v237,'beforeExpr',v239]|22741: write-variable[v237,'_equality']*|22742: new[v240]|22743: constant[7.0,v241]|22744: write-property[v240,'binop',v241]|22745: constant[true,v242]|22746: write-property[v240,'beforeExpr',v242]|22747: write-variable[v240,'_relational']*|22748: new[v243]|22749: constant[8.0,v244]|22750: write-property[v243,'binop',v244]|22751: constant[true,v245]|22752: write-property[v243,'beforeExpr',v245]|22753: write-variable[v243,'_bitShift']*|22754: new[v246]|22755: constant[9.0,v247]|22756: write-property[v246,'binop',v247]|22757: constant[true,v248]|22758: write-property[v246,'prefix',v248]|22759: constant[true,v249]|22760: write-property[v246,'beforeExpr',v249]|22761: write-variable[v246,'_plusMin']*|22762: new[v250]|22763: constant[10.0,v251]|22764: write-property[v250,'binop',v251]|22765: constant[true,v252]|22766: write-property[v250,'beforeExpr',v252]|22767: write-variable[v250,'_modulo']*|22768: new[v253]|22769: constant[10.0,v254]|22770: write-property[v253,'binop',v254]|22771: constant[true,v255]|22772: write-property[v253,'beforeExpr',v255]|22773: write-variable[v253,'_star']*|22774: read-variable['exports',v257,-]|22775: new[v256]|22776: read-variable['_bracketL',v258,-]|22777: write-property[v256,'bracketL',v258]|22778: read-variable['_bracketR',v259,-]|22779: write-property[v256,'bracketR',v259]|22780: read-variable['_braceL',v260,-]|22781: write-property[v256,'braceL',v260]|22782: read-variable['_braceR',v261,-]|22783: write-property[v256,'braceR',v261]|22784: read-variable['_parenL',v262,-]|22785: write-property[v256,'parenL',v262]|22786: read-variable['_parenR',v263,-]|22787: write-property[v256,'parenR',v263]|22788: read-variable['_comma',v264,-]|22789: write-property[v256,'comma',v264]|22790: read-variable['_semi',v265,-]|22791: write-property[v256,'semi',v265]|22792: read-variable['_colon',v266,-]|22793: write-property[v256,'colon',v266]|22794: read-variable['_dot',v267,-]|22795: write-property[v256,'dot',v267]|22796: read-variable['_ellipsis',v268,-]|22797: write-property[v256,'ellipsis',v268]|22798: read-variable['_question',v269,-]|22799: write-property[v256,'question',v269]|22800: read-variable['_slash',v270,-]|22801: write-property[v256,'slash',v270]|22802: read-variable['_eq',v271,-]|22803: write-property[v256,'eq',v271]|22804: read-variable['_name',v272,-]|22805: write-property[v256,'name',v272]|22806: read-variable['_eof',v273,-]|22807: write-property[v256,'eof',v273]|22808: read-variable['_num',v274,-]|22809: write-property[v256,'num',v274]|22810: read-variable['_regexp',v275,-]|22811: write-property[v256,'regexp',v275]|22812: read-variable['_string',v276,-]|22813: write-property[v256,'string',v276]|22814: read-variable['_arrow',v277,-]|22815: write-property[v256,'arrow',v277]|22816: read-variable['_bquote',v278,-]|22817: write-property[v256,'bquote',v278]|22818: read-variable['_dollarBraceL',v279,-]|22819: write-property[v256,'dollarBraceL',v279]|22820: write-property[v257,'tokTypes',v256]|22821: \<variable-non-null-undef\>['exports']*|22822: read-variable['keywordTypes',v281,-]}" ] 
BB7540 -> BB7541 [tailport=s, headport=n, headlabel="      7541"]
BB7540 -> BB7569 [tailport=s, headport=n, color=gray]
BB7541 [shape=record label="{22823: begin-for-in[v281,v282]}" ] 
BB7541 -> BB7542 [tailport=s, headport=n, headlabel="      7542"]
BB7541 -> BB7569 [tailport=s, headport=n, color=gray]
BB7542 [shape=record label="{22824: has-next[v282,v283]|22825: if[v283](true-block:7543,false-block:7545)}" ] 
BB7542 -> BB7543 [tailport=s, headport=n, headlabel="      7543"]
BB7542 -> BB7545 [tailport=s, headport=n, headlabel="      7545"]
BB7543 [shape=record label="{22826: next-property[v282,v284]|22827: write-variable[v284,'kw']|22828: read-variable['exports',v288,-]|22829: read-property[v288,'tokTypes',v286]|22830: \<variable-non-null-undef\>['exports']|22831: constant[\"_\",v289]|22832: read-variable['kw',v290,-]|22833: +[v289,v290,v287]|22834: read-variable['keywordTypes',v291,-]|22835: read-variable['kw',v292,-]|22836: read-property[v291,v292,v285]|22837: \<variable-non-null-undef\>['keywordTypes']|22838: write-property[v286,v287,v285]|22839: \<property-non-null-undef\>[v288,'tokTypes']*}" ] 
BB7543 -> BB7544 [tailport=s, headport=n, headlabel="      7544"]
BB7543 -> BB7569 [tailport=s, headport=n, color=gray]
BB7544 [shape=record label="{22840: end-for-in(begin-node:22823)}" ] 
BB7544 -> BB7542 [tailport=s, headport=n]
BB7545 [shape=record label="{22841: read-variable['makePredicate',v287,v286]|22842: constant[\"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",v288]}" ] 
BB7545 -> BB7546 [tailport=s, headport=n, headlabel="      7546"]
BB7545 -> BB7569 [tailport=s, headport=n, color=gray]
BB7546 [shape=record label="{22843: call-makePredicate [v286,v287,v288,v285]}" ] 
BB7546 -> BB7547 [tailport=s, headport=n, headlabel="      7547"]
BB7546 -> BB7569 [tailport=s, headport=n, color=gray]
BB7547 [shape=record label="{22844: write-variable[v285,'isReservedWord3']*|22845: read-variable['makePredicate',v291,v290]|22846: constant[\"class enum extends super const export import\",v292]}" ] 
BB7547 -> BB7548 [tailport=s, headport=n, headlabel="      7548"]
BB7547 -> BB7569 [tailport=s, headport=n, color=gray]
BB7548 [shape=record label="{22847: call-makePredicate [v290,v291,v292,v289]}" ] 
BB7548 -> BB7549 [tailport=s, headport=n, headlabel="      7549"]
BB7548 -> BB7569 [tailport=s, headport=n, color=gray]
BB7549 [shape=record label="{22848: write-variable[v289,'isReservedWord5']*|22849: read-variable['makePredicate',v295,v294]|22850: constant[\"implements interface let package private protected public static yield\",v296]}" ] 
BB7549 -> BB7550 [tailport=s, headport=n, headlabel="      7550"]
BB7549 -> BB7569 [tailport=s, headport=n, color=gray]
BB7550 [shape=record label="{22851: call-makePredicate [v294,v295,v296,v293]}" ] 
BB7550 -> BB7551 [tailport=s, headport=n, headlabel="      7551"]
BB7550 -> BB7569 [tailport=s, headport=n, color=gray]
BB7551 [shape=record label="{22852: write-variable[v293,'isStrictReservedWord']*|22853: read-variable['makePredicate',v299,v298]|22854: constant[\"eval arguments\",v300]}" ] 
BB7551 -> BB7552 [tailport=s, headport=n, headlabel="      7552"]
BB7551 -> BB7569 [tailport=s, headport=n, color=gray]
BB7552 [shape=record label="{22855: call-makePredicate [v298,v299,v300,v297]}" ] 
BB7552 -> BB7553 [tailport=s, headport=n, headlabel="      7553"]
BB7552 -> BB7569 [tailport=s, headport=n, color=gray]
BB7553 [shape=record label="{22856: write-variable[v297,'isStrictBadIdWord']*|22857: constant[\"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\",v301]|22858: write-variable[v301,'ecma5AndLessKeywords']*|22859: read-variable['makePredicate',v304,v303]|22860: read-variable['ecma5AndLessKeywords',v305,-]}" ] 
BB7553 -> BB7554 [tailport=s, headport=n, headlabel="      7554"]
BB7553 -> BB7569 [tailport=s, headport=n, color=gray]
BB7554 [shape=record label="{22861: call-makePredicate [v303,v304,v305,v302]}" ] 
BB7554 -> BB7555 [tailport=s, headport=n, headlabel="      7555"]
BB7554 -> BB7569 [tailport=s, headport=n, color=gray]
BB7555 [shape=record label="{22862: write-variable[v302,'isEcma5AndLessKeyword']*|22863: read-variable['makePredicate',v308,v307]|22864: read-variable['ecma5AndLessKeywords',v310,-]|22865: constant[\" let const class extends export import yield\",v311]|22866: +[v310,v311,v309]}" ] 
BB7555 -> BB7556 [tailport=s, headport=n, headlabel="      7556"]
BB7555 -> BB7569 [tailport=s, headport=n, color=gray]
BB7556 [shape=record label="{22867: call-makePredicate [v307,v308,v309,v306]}" ] 
BB7556 -> BB7557 [tailport=s, headport=n, headlabel="      7557"]
BB7556 -> BB7569 [tailport=s, headport=n, color=gray]
BB7557 [shape=record label="{22868: write-variable[v306,'isEcma6Keyword']*|22869: read-variable['isEcma5AndLessKeyword',v312,-]|22870: write-variable[v312,'isKeyword']*|22871: read-variable['RegExp',v314,-]|22872: constant[\"[\\\\u1680\\\\u180e\\\\u2000-\\\\u200a\\\\u202f\\\\u205f\\\\u3000\\\\ufeff]\",v315]}" ] 
BB7557 -> BB7558 [tailport=s, headport=n, headlabel="      7558"]
BB7557 -> BB7569 [tailport=s, headport=n, color=gray]
BB7558 [shape=record label="{22873: construct [-,v314,v315,v313]}" ] 
BB7558 -> BB7559 [tailport=s, headport=n, headlabel="      7559"]
BB7558 -> BB7569 [tailport=s, headport=n, color=gray]
BB7559 [shape=record label="{22874: write-variable[v313,'nonASCIIwhitespace']*|22875: constant[\"\\u00aa\\u00b5\\u00ba\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0-\\u08b2\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua7ad\\ua7b0\\ua7b1\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab5f\\uab64\\uab65\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\",v316]|22876: write-variable[v316,'nonASCIIidentifierStartChars']*|22877: constant[\"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d01-\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf8\\u1cf9\\u1dc0-\\u1df5\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2d\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\",v317]|22878: write-variable[v317,'nonASCIIidentifierChars']*|22879: read-variable['RegExp',v319,-]|22880: constant[\"[\",v323]|22881: read-variable['nonASCIIidentifierStartChars',v324,-]|22882: +[v323,v324,v321]|22883: constant[\"]\",v322]|22884: +[v321,v322,v320]}" ] 
BB7559 -> BB7560 [tailport=s, headport=n, headlabel="      7560"]
BB7559 -> BB7569 [tailport=s, headport=n, color=gray]
BB7560 [shape=record label="{22885: construct [-,v319,v320,v318]}" ] 
BB7560 -> BB7561 [tailport=s, headport=n, headlabel="      7561"]
BB7560 -> BB7569 [tailport=s, headport=n, color=gray]
BB7561 [shape=record label="{22886: write-variable[v318,'nonASCIIidentifierStart']*|22887: read-variable['RegExp',v326,-]|22888: constant[\"[\",v332]|22889: read-variable['nonASCIIidentifierStartChars',v333,-]|22890: +[v332,v333,v330]|22891: read-variable['nonASCIIidentifierChars',v331,-]|22892: +[v330,v331,v328]|22893: constant[\"]\",v329]|22894: +[v328,v329,v327]}" ] 
BB7561 -> BB7562 [tailport=s, headport=n, headlabel="      7562"]
BB7561 -> BB7569 [tailport=s, headport=n, color=gray]
BB7562 [shape=record label="{22895: construct [-,v326,v327,v325]}" ] 
BB7562 -> BB7563 [tailport=s, headport=n, headlabel="      7563"]
BB7562 -> BB7569 [tailport=s, headport=n, color=gray]
BB7563 [shape=record label="{22896: write-variable[v325,'nonASCIIidentifier']*|22897: read-variable['RegExp',v335,-]|22898: constant[\"[\\\\n\\\\r\\\\u2028\\\\u2029]\",v336]}" ] 
BB7563 -> BB7564 [tailport=s, headport=n, headlabel="      7564"]
BB7563 -> BB7569 [tailport=s, headport=n, color=gray]
BB7564 [shape=record label="{22899: construct [-,v335,v336,v334]}" ] 
BB7564 -> BB7565 [tailport=s, headport=n, headlabel="      7565"]
BB7564 -> BB7569 [tailport=s, headport=n, color=gray]
BB7565 [shape=record label="{22900: write-variable[v334,'newline']*|22901: read-variable['RegExp',v338,-]|22902: constant[\"\\\\r\\\\n|[\\\\n\\\\r\\\\u2028\\\\u2029]\",v339]|22903: constant[\"g\",v340]}" ] 
BB7565 -> BB7566 [tailport=s, headport=n, headlabel="      7566"]
BB7565 -> BB7569 [tailport=s, headport=n, color=gray]
BB7566 [shape=record label="{22904: construct [-,v338,v339,v340,v337]}" ] 
BB7566 -> BB7567 [tailport=s, headport=n, headlabel="      7567"]
BB7566 -> BB7569 [tailport=s, headport=n, color=gray]
BB7567 [shape=record label="{22905: write-variable[v337,'lineBreak']*|22906: read-variable['exports',v342,-]|22907: function-expr[function ( code ),v341]|22908: write-property[v342,'isIdentifierStart',v341]|22909: \<variable-non-null-undef\>['exports']|22910: write-variable[v341,'isIdentifierStart']*|22911: read-variable['exports',v344,-]|22912: function-expr[function ( code ),v343]|22913: write-property[v344,'isIdentifierChar',v343]|22914: \<variable-non-null-undef\>['exports']|22915: write-variable[v343,'isIdentifierChar']*|22916: read-variable['exports',v346,-]|22917: read-variable['Node',v345,-]|22918: write-property[v346,'Node',v345]|22919: \<variable-non-null-undef\>['exports']*|22920: new[v347]|22921: constant[\"loop\",v348]|22922: write-property[v347,'kind',v348]|22923: write-variable[v347,'loopLabel']*|22924: new[v349]|22925: constant[\"switch\",v350]|22926: write-property[v349,'kind',v350]|22927: write-variable[v349,'switchLabel']*}" ] 
BB7567 -> BB7568 [tailport=s, headport=n, headlabel="      7568"]
BB7567 -> BB7569 [tailport=s, headport=n, color=gray]
BB7568 [shape=record label="{22928: return[v1]}" ] 
BB7569 [shape=record label="{22929: exceptional-return}" ] 
//#$~ 7111
}
