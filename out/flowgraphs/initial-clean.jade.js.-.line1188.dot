digraph {
rankdir="TD"
BB_entry55[shape=none,label=""];
BB_entry55 -> BB2103 [tailport=s, headport=n, headlabel="    2103"]
BB2103 [shape=record label="{6556: constant[undefined,v1]|6557: vardecl['utils']|6558: vardecl['characterParser']|6559: vardecl['Lexer']|6560: function-decl[function assertExpression ( exp ),-]|6561: function-decl[function assertNestingCorrect ( exp ),-]}" ] 
BB2103 -> BB2104 [tailport=s, headport=n, headlabel="      2104"]
BB2104 [shape=record label="{6562: read-variable['require',v4,v3]|6563: constant[\"./utils\",v5]}" ] 
BB2104 -> BB2105 [tailport=s, headport=n, headlabel="      2105"]
BB2104 -> BB2110 [tailport=s, headport=n, color=gray, headlabel="      2110"]
BB2105 [shape=record label="{6564: call-require [v3,v4,v5,v2]}" ] 
BB2105 -> BB2106 [tailport=s, headport=n, headlabel="      2106"]
BB2105 -> BB2110 [tailport=s, headport=n, color=gray]
BB2106 [shape=record label="{6565: write-variable[v2,'utils']*|6566: read-variable['require',v8,v7]|6567: constant[\"character-parser\",v9]}" ] 
BB2106 -> BB2107 [tailport=s, headport=n, headlabel="      2107"]
BB2106 -> BB2110 [tailport=s, headport=n, color=gray]
BB2107 [shape=record label="{6568: call-require [v7,v8,v9,v6]}" ] 
BB2107 -> BB2108 [tailport=s, headport=n, headlabel="      2108"]
BB2107 -> BB2110 [tailport=s, headport=n, color=gray]
BB2108 [shape=record label="{6569: write-variable[v6,'characterParser']*|6570: read-variable['module',v11,-]|6571: function-expr[function Lexer ( str filename ),v10]|6572: write-property[v11,'exports',v10]|6573: \<variable-non-null-undef\>['module']|6574: write-variable[v10,'Lexer']*|6575: read-variable['Lexer',v13,-]|6576: new[v12]|6577: function-expr[function ( type val ),v14]|6578: write-property[v12,'tok',v14]|6579: function-expr[function ( len ),v15]|6580: write-property[v12,'consume',v15]|6581: function-expr[function ( regexp type ),v16]|6582: write-property[v12,'scan',v16]|6583: function-expr[function ( tok ),v17]|6584: write-property[v12,'defer',v17]|6585: function-expr[function ( n ),v18]|6586: write-property[v12,'lookahead',v18]|6587: function-expr[function ( skip ),v19]|6588: write-property[v12,'bracketExpression',v19]|6589: function-expr[function ( ),v20]|6590: write-property[v12,'stashed',v20]|6591: function-expr[function ( ),v21]|6592: write-property[v12,'deferred',v21]|6593: function-expr[function ( ),v22]|6594: write-property[v12,'eos',v22]|6595: function-expr[function ( ),v23]|6596: write-property[v12,'blank',v23]|6597: function-expr[function ( ),v24]|6598: write-property[v12,'comment',v24]|6599: function-expr[function ( ),v25]|6600: write-property[v12,'interpolation',v25]|6601: function-expr[function ( ),v26]|6602: write-property[v12,'tag',v26]|6603: function-expr[function ( ),v27]|6604: write-property[v12,'filter',v27]|6605: function-expr[function ( ),v28]|6606: write-property[v12,'doctype',v28]|6607: function-expr[function ( ),v29]|6608: write-property[v12,'id',v29]|6609: function-expr[function ( ),v30]|6610: write-property[v12,'className',v30]|6611: function-expr[function ( ),v31]|6612: write-property[v12,'text',v31]|6613: function-expr[function ( ),v32]|6614: write-property[v12,'textFail',v32]|6615: function-expr[function ( ),v33]|6616: write-property[v12,'dot',v33]|6617: function-expr[function ( ),v34]|6618: write-property[v12,'extends',v34]|6619: function-expr[function ( ),v35]|6620: write-property[v12,'prepend',v35]|6621: function-expr[function ( ),v36]|6622: write-property[v12,'append',v36]|6623: function-expr[function ( ),v37]|6624: write-property[v12,'block',v37]|6625: function-expr[function ( ),v38]|6626: write-property[v12,'mixinBlock',v38]|6627: function-expr[function ( ),v39]|6628: write-property[v12,'yield',v39]|6629: function-expr[function ( ),v40]|6630: write-property[v12,'include',v40]|6631: function-expr[function ( ),v41]|6632: write-property[v12,'includeFiltered',v41]|6633: function-expr[function ( ),v42]|6634: write-property[v12,'case',v42]|6635: function-expr[function ( ),v43]|6636: write-property[v12,'when',v43]|6637: function-expr[function ( ),v44]|6638: write-property[v12,'default',v44]|6639: function-expr[function ( ),v45]|6640: write-property[v12,'call',v45]|6641: function-expr[function ( ),v46]|6642: write-property[v12,'mixin',v46]|6643: function-expr[function ( ),v47]|6644: write-property[v12,'conditional',v47]|6645: function-expr[function ( ),v48]|6646: write-property[v12,'while',v48]|6647: function-expr[function ( ),v49]|6648: write-property[v12,'each',v49]|6649: function-expr[function ( ),v50]|6650: write-property[v12,'code',v50]|6651: function-expr[function ( ),v51]|6652: write-property[v12,'attrs',v51]|6653: function-expr[function ( ),v52]|6654: write-property[v12,'attributesBlock',v52]|6655: function-expr[function ( ),v53]|6656: write-property[v12,'indent',v53]|6657: function-expr[function ( ),v54]|6658: write-property[v12,'pipelessText',v54]|6659: function-expr[function ( ),v55]|6660: write-property[v12,'colon',v55]|6661: function-expr[function ( ),v56]|6662: write-property[v12,'fail',v56]|6663: function-expr[function ( ),v57]|6664: write-property[v12,'advance',v57]|6665: function-expr[function ( ),v58]|6666: write-property[v12,'next',v58]|6667: write-property[v13,'prototype',v12]|6668: \<variable-non-null-undef\>['Lexer']*}" ] 
BB2108 -> BB2109 [tailport=s, headport=n, headlabel="      2109"]
BB2108 -> BB2110 [tailport=s, headport=n, color=gray]
BB2109 [shape=record label="{6669: return[v1]}" ] 
BB2110 [shape=record label="{6670: exceptional-return}" ] 
//#$~ 2118
}
