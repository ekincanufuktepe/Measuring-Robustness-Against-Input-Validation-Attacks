fg2: <main> function()
  block 0: [entry]
    node 0: constant[undefined,v1] (test/flowgraphbuilder/flowgraph_builder0132.js:1:1)
    node 1: function-decl[function PB(c,dgg),-] (test/flowgraphbuilder/flowgraph_builder0132.js:1:1)
    ->[block 1]
  block 1:
    node 2: read-variable['PB',v3,v2] (test/flowgraphbuilder/flowgraph_builder0132.js:7:1)
    node 3: constant[1.0,v4] (test/flowgraphbuilder/flowgraph_builder0132.js:7:4)
    node 4: constant[2.0,v5] (test/flowgraphbuilder/flowgraph_builder0132.js:7:7)
    ->[block 2]
  block 2:
    node 5: call[v2,v3,v4,v5,-]* (test/flowgraphbuilder/flowgraph_builder0132.js:7:1)
    ->[block 3]
  block 3: [exit-ordinary]
    node 6: return[v1] (test/flowgraphbuilder/flowgraph_builder0132.js:1:1)
    ->[]
  block 4: [exit-exceptional]
    node 7: exceptional-return (test/flowgraphbuilder/flowgraph_builder0132.js:1:1)
    ->[]
function PB(c,dgg)
  block 5: [entry]
    node 8: constant[undefined,v1] (test/flowgraphbuilder/flowgraph_builder0132.js:1:1)
    node 9: vardecl['dgg'] (test/flowgraphbuilder/flowgraph_builder0132.js:3:13)
    ->[block 6]
  block 6:
    node 10: typeof['dgg',v3] (test/flowgraphbuilder/flowgraph_builder0132.js:2:10)
    node 11: constant["undefined",v4] (test/flowgraphbuilder/flowgraph_builder0132.js:2:26)
    node 12: ==[v3,v4,v2] (test/flowgraphbuilder/flowgraph_builder0132.js:2:10)
    node 13: if[v2](true-block:9,false-block:7) (test/flowgraphbuilder/flowgraph_builder0132.js:2:10)
    ->[block 7,block 9]
  block 7:
    node 14: read-variable['dgg',v3,-] (test/flowgraphbuilder/flowgraph_builder0132.js:2:44)
    node 15: ![v3,v2] (test/flowgraphbuilder/flowgraph_builder0132.js:2:43)
    node 16: if[v2](true-block:9,false-block:8) (test/flowgraphbuilder/flowgraph_builder0132.js:2:43)
    ->[block 8,block 9]
  block 8:
    node 17: read-variable['dgg',v3,-] (test/flowgraphbuilder/flowgraph_builder0132.js:2:53)
    node 18: constant["undefined",v4] (test/flowgraphbuilder/flowgraph_builder0132.js:2:60)
    node 19: ==[v3,v4,v2] (test/flowgraphbuilder/flowgraph_builder0132.js:2:53)
    ->[block 9]
  block 9:
    node 20: if[v2](true-block:10,false-block:11) (test/flowgraphbuilder/flowgraph_builder0132.js:2:5)
    ->[block 10,block 11]
  block 10:
    node 21: constant["self.",v3] (test/flowgraphbuilder/flowgraph_builder0132.js:3:19)
    node 22: write-variable[v3,'dgg']* (test/flowgraphbuilder/flowgraph_builder0132.js:3:19)
    ->[block 11]
  block 11: [exit-ordinary]
    node 23: return[v1] (test/flowgraphbuilder/flowgraph_builder0132.js:3:19)
    ->[]
  block 12: [exit-exceptional]
    node 24: exceptional-return (test/flowgraphbuilder/flowgraph_builder0132.js:3:19)
    ->[]

test/flowgraphbuilder/flowgraph_builder0132.js:2:5: [definite] The conditional expression is always false
test/flowgraphbuilder/flowgraph_builder0132.js:2:10: [definite] The conditional expression is always false
test/flowgraphbuilder/flowgraph_builder0132.js:2:43: [definite] The conditional expression is always false
test/flowgraphbuilder/flowgraph_builder0132.js:1:1: [definite] The variable c is never used
test/flowgraphbuilder/flowgraph_builder0132.js:3:13: [definite] The variable declaration dgg shadows a parameter
test/flowgraphbuilder/flowgraph_builder0132.js:2:53: [maybe] Conversion from string to number yields NaN
