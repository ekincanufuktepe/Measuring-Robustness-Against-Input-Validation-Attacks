fg2: <main> function()
  block 0: [entry]
    node 0: constant[undefined,v1] (test/flowgraphbuilder/flowgraph_builder0057.js:1:1)
    node 1: function-decl[function f(),-] (test/flowgraphbuilder/flowgraph_builder0057.js:1:1)
    ->[block 1]
  block 1:
    node 2: read-variable['f',v4,v3] (test/flowgraphbuilder/flowgraph_builder0057.js:5:1)
    ->[block 2]
  block 2:
    node 3: call[v3,v4,v2] (test/flowgraphbuilder/flowgraph_builder0057.js:5:1)
    ->[block 3]
  block 3:
    node 4: if[v2](true-block:4,false-block:5) (test/flowgraphbuilder/flowgraph_builder0057.js:5:1)
    ->[block 4,block 5]
  block 4:
    node 5: constant[true,-] (test/flowgraphbuilder/flowgraph_builder0057.js:5:8)
    ->[block 5]
  block 5: [exit-ordinary]
    node 6: return[v1] (test/flowgraphbuilder/flowgraph_builder0057.js:1:1)
    ->[]
  block 6: [exit-exceptional]
    node 7: exceptional-return (test/flowgraphbuilder/flowgraph_builder0057.js:1:1)
    ->[]
function f()
  block 7: [entry]
    node 8: constant[undefined,v1] (test/flowgraphbuilder/flowgraph_builder0057.js:1:1)
    ->[block 8]
  block 8:
    node 9: constant[1.0,v1] (test/flowgraphbuilder/flowgraph_builder0057.js:2:10)
    ->[block 9]
  block 9: [exit-ordinary]
    node 10: return[v1] (test/flowgraphbuilder/flowgraph_builder0057.js:2:10)
    ->[]
  block 10: [exit-exceptional]
    node 11: exceptional-return (test/flowgraphbuilder/flowgraph_builder0057.js:2:10)
    ->[]

test/flowgraphbuilder/flowgraph_builder0057.js:5:1: [definite] The conditional expression is always true
