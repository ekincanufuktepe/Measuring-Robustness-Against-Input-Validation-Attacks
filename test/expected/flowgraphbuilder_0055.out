fg2: <main> function()
  block 0: [entry]
    node 0: constant[undefined,v1] (test/flowgraphbuilder/flowgraph_builder0055.js:1:1)
    node 1: function-decl[function f(),-] (test/flowgraphbuilder/flowgraph_builder0055.js:1:1)
    ->[block 1]
  block 1:
    node 2: read-variable['f',v4,v3] (test/flowgraphbuilder/flowgraph_builder0055.js:5:5)
    ->[block 2]
  block 2:
    node 3: call[v3,v4,v2] (test/flowgraphbuilder/flowgraph_builder0055.js:5:5)
    ->[block 3]
  block 3:
    node 4: if[v2](true-block:4,false-block:5) (test/flowgraphbuilder/flowgraph_builder0055.js:5:5)
    ->[block 4,block 5]
  block 4:
    node 5: constant[true,v2] (test/flowgraphbuilder/flowgraph_builder0055.js:5:12)
    ->[block 5]
  block 5:
    node 6: write-variable[v2,'x']* (test/flowgraphbuilder/flowgraph_builder0055.js:5:1)
    node 7: read-variable['dumpValue',v6,v5] (test/flowgraphbuilder/flowgraph_builder0055.js:7:1)
    node 8: read-variable['x',v7,-] (test/flowgraphbuilder/flowgraph_builder0055.js:7:11)
    ->[block 6]
  block 6:
    node 9: call[v5,v6,v7,-]* (test/flowgraphbuilder/flowgraph_builder0055.js:7:1)
    ->[block 7]
  block 7: [exit-ordinary]
    node 10: return[v1] (test/flowgraphbuilder/flowgraph_builder0055.js:1:1)
    ->[]
  block 8: [exit-exceptional]
    node 11: exceptional-return (test/flowgraphbuilder/flowgraph_builder0055.js:1:1)
    ->[]
function f()
  block 9: [entry]
    node 12: constant[undefined,v1] (test/flowgraphbuilder/flowgraph_builder0055.js:1:1)
    ->[block 10]
  block 10:
    node 13: constant[1.0,v1] (test/flowgraphbuilder/flowgraph_builder0055.js:2:10)
    ->[block 11]
  block 11: [exit-ordinary]
    node 14: return[v1] (test/flowgraphbuilder/flowgraph_builder0055.js:2:10)
    ->[]
  block 12: [exit-exceptional]
    node 15: exceptional-return (test/flowgraphbuilder/flowgraph_builder0055.js:2:10)
    ->[]

test/flowgraphbuilder/flowgraph_builder0055.js:5:5: [definite] The conditional expression is always true
test/flowgraphbuilder/flowgraph_builder0055.js:7:1: [info] Abstract value: true
